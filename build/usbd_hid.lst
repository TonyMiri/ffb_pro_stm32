ARM GAS  /tmp/ccrUoaPi.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"usbd_hid.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USBD_HID_DataIn,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	USBD_HID_DataIn:
  26              	.LVL0:
  27              	.LFB146:
  28              		.file 1 "Src/usbd_hid.c"
   1:Src/usbd_hid.c **** /**
   2:Src/usbd_hid.c ****   ******************************************************************************
   3:Src/usbd_hid.c ****   * @file    usbd_hid.c
   4:Src/usbd_hid.c ****   * @brief   HID joystick + force feedback implementation
   5:Src/usbd_hid.c ****   ******************************************************************************
   6:Src/usbd_hid.c ****   */
   7:Src/usbd_hid.c **** 
   8:Src/usbd_hid.c **** #include "usbd_hid.h"
   9:Src/usbd_hid.c **** #include "usbd_ctlreq.h"
  10:Src/usbd_hid.c **** 
  11:Src/usbd_hid.c **** static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx);
  12:Src/usbd_hid.c **** static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx);
  13:Src/usbd_hid.c **** static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req);
  14:Src/usbd_hid.c **** static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum);
  15:Src/usbd_hid.c **** #ifndef USE_USBD_COMPOSITE
  16:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length);
  17:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length);
  18:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length);
  19:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length);
  20:Src/usbd_hid.c **** #endif
  21:Src/usbd_hid.c **** 
  22:Src/usbd_hid.c **** USBD_ClassTypeDef USBD_HID =
  23:Src/usbd_hid.c **** {
  24:Src/usbd_hid.c ****   USBD_HID_Init,
  25:Src/usbd_hid.c ****   USBD_HID_DeInit,
  26:Src/usbd_hid.c ****   USBD_HID_Setup,
  27:Src/usbd_hid.c ****   NULL,              /* EP0_TxSent */
  28:Src/usbd_hid.c ****   NULL,              /* EP0_RxReady */
  29:Src/usbd_hid.c ****   USBD_HID_DataIn,   /* DataIn */
  30:Src/usbd_hid.c ****   NULL,              /* DataOut */
ARM GAS  /tmp/ccrUoaPi.s 			page 2


  31:Src/usbd_hid.c ****   NULL,              /* SOF */
  32:Src/usbd_hid.c ****   NULL,
  33:Src/usbd_hid.c ****   NULL,
  34:Src/usbd_hid.c **** #ifdef USE_USBD_COMPOSITE
  35:Src/usbd_hid.c ****   NULL,
  36:Src/usbd_hid.c ****   NULL,
  37:Src/usbd_hid.c ****   NULL,
  38:Src/usbd_hid.c ****   NULL,
  39:Src/usbd_hid.c **** #else
  40:Src/usbd_hid.c ****   USBD_HID_GetHSCfgDesc,
  41:Src/usbd_hid.c ****   USBD_HID_GetFSCfgDesc,
  42:Src/usbd_hid.c ****   USBD_HID_GetOtherSpeedCfgDesc,
  43:Src/usbd_hid.c ****   USBD_HID_GetDeviceQualifierDesc,
  44:Src/usbd_hid.c **** #endif
  45:Src/usbd_hid.c **** };
  46:Src/usbd_hid.c **** 
  47:Src/usbd_hid.c **** #define HID_MOUSE_REPORT_DESC_SIZE    185 
  48:Src/usbd_hid.c **** 
  49:Src/usbd_hid.c **** __ALIGN_BEGIN static uint8_t USBD_HID_CfgDesc[USB_HID_CONFIG_DESC_SIZ] __ALIGN_END =
  50:Src/usbd_hid.c **** {
  51:Src/usbd_hid.c ****   0x09,                               /* bLength: Configuration Descriptor size */
  52:Src/usbd_hid.c ****   USB_DESC_TYPE_CONFIGURATION,        /* bDescriptorType: Configuration */
  53:Src/usbd_hid.c ****   USB_HID_CONFIG_DESC_SIZ,           /* wTotalLength: Bytes returned */
  54:Src/usbd_hid.c ****   0x00,
  55:Src/usbd_hid.c ****   0x01,                              /* bNumInterfaces: 1 interface */
  56:Src/usbd_hid.c ****   0x01,                              /* bConfigurationValue: Configuration value */
  57:Src/usbd_hid.c ****   0x00,                              /* iConfiguration: Index of string descriptor */
  58:Src/usbd_hid.c ****   0xA0,                              /* bmAttributes: Bus powered */
  59:Src/usbd_hid.c ****   0x32,                              /* MaxPower 100 mA: this current is used for detecting Vbus */
  60:Src/usbd_hid.c **** 
  61:Src/usbd_hid.c ****   /************** Descriptor of Joystick interface ****************/
  62:Src/usbd_hid.c ****   0x09,                              /* bLength: Interface Descriptor size */
  63:Src/usbd_hid.c ****   USB_DESC_TYPE_INTERFACE,           /* bDescriptorType: Interface descriptor type */
  64:Src/usbd_hid.c ****   0x00,                              /* bInterfaceNumber: Number of Interface */
  65:Src/usbd_hid.c ****   0x00,                              /* bAlternateSetting: Alternate setting */
  66:Src/usbd_hid.c ****   0x01,                              /* bNumEndpoints */
  67:Src/usbd_hid.c ****   0x03,                              /* bInterfaceClass: HID */
  68:Src/usbd_hid.c ****   0x00,                              /* bInterfaceSubClass : 0=No Boot */
  69:Src/usbd_hid.c ****   0x00,                              /* nInterfaceProtocol : 0=None */
  70:Src/usbd_hid.c ****   0,                                 /* iInterface: Index of string descriptor */
  71:Src/usbd_hid.c ****   /******************** Descriptor of Joystick HID ********************/
  72:Src/usbd_hid.c ****   0x09,                              /* bLength: HID Descriptor size */
  73:Src/usbd_hid.c ****   HID_DESCRIPTOR_TYPE,               /* bDescriptorType: HID */
  74:Src/usbd_hid.c ****   0x11,                              /* bcdHID: HID Class Spec release number */
  75:Src/usbd_hid.c ****   0x01,
  76:Src/usbd_hid.c ****   0x00,                              /* bCountryCode: Hardware target country */
  77:Src/usbd_hid.c ****   0x01,                              /* bNumDescriptors: Number of HID class descriptors to follow 
  78:Src/usbd_hid.c ****   0x22,                              /* bDescriptorType */
  79:Src/usbd_hid.c ****   HID_MOUSE_REPORT_DESC_SIZE,        /* wItemLength: Total length of Report descriptor */
  80:Src/usbd_hid.c ****   0x00,
  81:Src/usbd_hid.c ****   /******************** Descriptor of Mouse endpoint ********************/
  82:Src/usbd_hid.c ****   0x07,                              /* bLength: Endpoint Descriptor size */
  83:Src/usbd_hid.c ****   USB_DESC_TYPE_ENDPOINT,            /* bDescriptorType: */
  84:Src/usbd_hid.c ****   HID_EPIN_ADDR,                     /* bEndpointAddress: Endpoint Address (IN) */
  85:Src/usbd_hid.c ****   0x03,                              /* bmAttributes: Interrupt endpoint */
  86:Src/usbd_hid.c ****   HID_EPIN_SIZE,                     /* wMaxPacketSize: 4 Byte max */
  87:Src/usbd_hid.c ****   0x00,
ARM GAS  /tmp/ccrUoaPi.s 			page 3


  88:Src/usbd_hid.c ****   HID_FS_BINTERVAL,                  /* bInterval: Polling Interval */
  89:Src/usbd_hid.c **** };
  90:Src/usbd_hid.c **** 
  91:Src/usbd_hid.c **** /* USB HID device Configuration Descriptor */
  92:Src/usbd_hid.c **** __ALIGN_BEGIN static uint8_t USBD_HID_Desc[USB_HID_DESC_SIZ] __ALIGN_END =
  93:Src/usbd_hid.c **** {
  94:Src/usbd_hid.c ****   0x09,                               /* bLength: HID Descriptor size */
  95:Src/usbd_hid.c ****   HID_DESCRIPTOR_TYPE,                /* bDescriptorType: HID */
  96:Src/usbd_hid.c ****   0x11,                               /* bcdHID: HID Class Spec release number */
  97:Src/usbd_hid.c ****   0x01,
  98:Src/usbd_hid.c ****   0x00,                               /* bCountryCode: Hardware target country */
  99:Src/usbd_hid.c ****   0x01,                               /* bNumDescriptors: Number of HID class descriptors to follow
 100:Src/usbd_hid.c ****   0x22,                               /* bDescriptorType */
 101:Src/usbd_hid.c ****   HID_MOUSE_REPORT_DESC_SIZE,         /* wItemLength: Total length of Report descriptor */
 102:Src/usbd_hid.c ****   0x00,
 103:Src/usbd_hid.c **** };
 104:Src/usbd_hid.c **** 
 105:Src/usbd_hid.c **** #ifndef USE_USBD_COMPOSITE
 106:Src/usbd_hid.c **** /* USB Standard Device Descriptor */
 107:Src/usbd_hid.c **** __ALIGN_BEGIN static uint8_t USBD_HID_DeviceQualifierDesc[USB_LEN_DEV_QUALIFIER_DESC] __ALIGN_END =
 108:Src/usbd_hid.c **** {
 109:Src/usbd_hid.c ****   USB_LEN_DEV_QUALIFIER_DESC,
 110:Src/usbd_hid.c ****   USB_DESC_TYPE_DEVICE_QUALIFIER,
 111:Src/usbd_hid.c ****   0x00,
 112:Src/usbd_hid.c ****   0x02,
 113:Src/usbd_hid.c ****   0x00,
 114:Src/usbd_hid.c ****   0x00,
 115:Src/usbd_hid.c ****   0x00,
 116:Src/usbd_hid.c ****   0x40,
 117:Src/usbd_hid.c ****   0x01,
 118:Src/usbd_hid.c ****   0x00,
 119:Src/usbd_hid.c **** };
 120:Src/usbd_hid.c **** #endif
 121:Src/usbd_hid.c **** 
 122:Src/usbd_hid.c **** /* USB HID device Configuration Descriptor */
 123:Src/usbd_hid.c **** __ALIGN_BEGIN static uint8_t HID_MOUSE_ReportDesc[HID_MOUSE_REPORT_DESC_SIZE] __ALIGN_END =
 124:Src/usbd_hid.c **** {
 125:Src/usbd_hid.c ****     // Report ID 1: Joystick Input
 126:Src/usbd_hid.c ****     0x05, 0x01,         // Usage Page (Generic Desktop)
 127:Src/usbd_hid.c ****     0x09, 0x04,         // Usage (Joystick)
 128:Src/usbd_hid.c ****     0xA1, 0x01,         // Collection (Application)
 129:Src/usbd_hid.c ****     
 130:Src/usbd_hid.c ****     // Declare force feedback capabilities
 131:Src/usbd_hid.c ****     0x85, 0x01,         // Report ID (1)
 132:Src/usbd_hid.c ****     0x09, 0x01,         // Usage (Pointer)
 133:Src/usbd_hid.c ****     0xA1, 0x00,         // Collection (Physical)
 134:Src/usbd_hid.c ****     
 135:Src/usbd_hid.c ****     // X and Y axes with proper ranges
 136:Src/usbd_hid.c ****     0x09, 0x30,         // Usage (X)
 137:Src/usbd_hid.c ****     0x09, 0x31,         // Usage (Y)
 138:Src/usbd_hid.c ****     0x16, 0x00, 0x80,   // Logical Minimum (-32768)
 139:Src/usbd_hid.c ****     0x26, 0xFF, 0x7F,   // Logical Maximum (32767)
 140:Src/usbd_hid.c ****     0x75, 0x10,         // Report Size (16)
 141:Src/usbd_hid.c ****     0x95, 0x02,         // Report Count (2)
 142:Src/usbd_hid.c ****     0x81, 0x02,         // Input (Data, Variable, Absolute)
 143:Src/usbd_hid.c ****     
 144:Src/usbd_hid.c ****     // 8 Buttons
ARM GAS  /tmp/ccrUoaPi.s 			page 4


 145:Src/usbd_hid.c ****     0x05, 0x09,         // Usage Page (Button)
 146:Src/usbd_hid.c ****     0x19, 0x01,         // Usage Minimum (Button 1)
 147:Src/usbd_hid.c ****     0x29, 0x08,         // Usage Maximum (Button 8)
 148:Src/usbd_hid.c ****     0x15, 0x00,         // Logical Minimum (0)
 149:Src/usbd_hid.c ****     0x25, 0x01,         // Logical Maximum (1)
 150:Src/usbd_hid.c ****     0x75, 0x01,         // Report Size (1)
 151:Src/usbd_hid.c ****     0x95, 0x08,         // Report Count (8)
 152:Src/usbd_hid.c ****     0x81, 0x02,         // Input (Data, Variable, Absolute)
 153:Src/usbd_hid.c ****     0xC0,               // End Collection (Physical)
 154:Src/usbd_hid.c ****     
 155:Src/usbd_hid.c ****     // Force Feedback section
 156:Src/usbd_hid.c ****     0x05, 0x0F,         // Usage Page (Physical Interface)
 157:Src/usbd_hid.c ****     0x09, 0x92,         // Usage (PID State Report)
 158:Src/usbd_hid.c ****     0xA1, 0x02,         // Collection (Logical)
 159:Src/usbd_hid.c ****     0x85, 0x02,         // Report ID (2)
 160:Src/usbd_hid.c ****     
 161:Src/usbd_hid.c ****     // Device status
 162:Src/usbd_hid.c ****     0x09, 0x9F,         // Usage (Device Paused)
 163:Src/usbd_hid.c ****     0x09, 0xA0,         // Usage (Actuators Enabled)
 164:Src/usbd_hid.c ****     0x09, 0xA4,         // Usage (Safety Switch)
 165:Src/usbd_hid.c ****     0x09, 0xA5,         // Usage (Actuator Override Switch)
 166:Src/usbd_hid.c ****     0x09, 0xA6,         // Usage (Actuator Power)
 167:Src/usbd_hid.c ****     0x15, 0x00,         // Logical Minimum (0)
 168:Src/usbd_hid.c ****     0x25, 0x01,         // Logical Maximum (1)
 169:Src/usbd_hid.c ****     0x75, 0x01,         // Report Size (1)
 170:Src/usbd_hid.c ****     0x95, 0x05,         // Report Count (5)
 171:Src/usbd_hid.c ****     0x81, 0x02,         // Input (Data, Variable, Absolute)
 172:Src/usbd_hid.c ****     
 173:Src/usbd_hid.c ****     // Pad to byte boundary
 174:Src/usbd_hid.c ****     0x75, 0x03,         // Report Size (3)
 175:Src/usbd_hid.c ****     0x95, 0x01,         // Report Count (1)
 176:Src/usbd_hid.c ****     0x81, 0x03,         // Input (Constant, Variable, Absolute)
 177:Src/usbd_hid.c ****     
 178:Src/usbd_hid.c ****     // Effect block index
 179:Src/usbd_hid.c ****     0x09, 0x94,         // Usage (Effect Playing)
 180:Src/usbd_hid.c ****     0x15, 0x00,         // Logical Minimum (0)
 181:Src/usbd_hid.c ****     0x25, 0x28,         // Logical Maximum (40)
 182:Src/usbd_hid.c ****     0x75, 0x08,         // Report Size (8)
 183:Src/usbd_hid.c ****     0x95, 0x01,         // Report Count (1)
 184:Src/usbd_hid.c ****     0x81, 0x02,         // Input (Data, Variable, Absolute)
 185:Src/usbd_hid.c ****     0xC0,               // End Collection (Logical)
 186:Src/usbd_hid.c ****     
 187:Src/usbd_hid.c ****     // Force Feedback Effects
 188:Src/usbd_hid.c ****     0x05, 0x0F,         // Usage Page (Physical Interface)
 189:Src/usbd_hid.c ****     0x09, 0x21,         // Usage (Set Effect Report)
 190:Src/usbd_hid.c ****     0xA1, 0x02,         // Collection (Logical)
 191:Src/usbd_hid.c ****     0x85, 0x01,         // Report ID (1)
 192:Src/usbd_hid.c ****     0x09, 0x22,         // Usage (Effect Block Index)
 193:Src/usbd_hid.c ****     0x15, 0x01,         // Logical Minimum (1)
 194:Src/usbd_hid.c ****     0x25, 0x28,         // Logical Maximum (40)
 195:Src/usbd_hid.c ****     0x75, 0x08,         // Report Size (8)
 196:Src/usbd_hid.c ****     0x95, 0x01,         // Report Count (1)
 197:Src/usbd_hid.c ****     0x91, 0x02,         // Output (Data, Variable, Absolute)
 198:Src/usbd_hid.c ****     
 199:Src/usbd_hid.c ****     0x09, 0x25,         // Usage (Effect Type)
 200:Src/usbd_hid.c ****     0xA1, 0x02,         // Collection (Logical)
 201:Src/usbd_hid.c ****     0x09, 0x26,         // Usage (ET Constant Force)
ARM GAS  /tmp/ccrUoaPi.s 			page 5


 202:Src/usbd_hid.c ****     0x09, 0x27,         // Usage (ET Ramp)
 203:Src/usbd_hid.c ****     0x09, 0x30,         // Usage (ET Square)
 204:Src/usbd_hid.c ****     0x09, 0x31,         // Usage (ET Sine)
 205:Src/usbd_hid.c ****     0x09, 0x32,         // Usage (ET Triangle)
 206:Src/usbd_hid.c ****     0x09, 0x33,         // Usage (ET Sawtooth Up)
 207:Src/usbd_hid.c ****     0x09, 0x34,         // Usage (ET Sawtooth Down)
 208:Src/usbd_hid.c ****     0x09, 0x40,         // Usage (ET Spring)
 209:Src/usbd_hid.c ****     0x09, 0x41,         // Usage (ET Damper)
 210:Src/usbd_hid.c ****     0x09, 0x42,         // Usage (ET Inertia)
 211:Src/usbd_hid.c ****     0x09, 0x43,         // Usage (ET Friction)
 212:Src/usbd_hid.c ****     0x25, 0x0B,         // Logical Maximum (11)
 213:Src/usbd_hid.c ****     0x75, 0x08,         // Report Size (8)
 214:Src/usbd_hid.c ****     0x95, 0x01,         // Report Count (1)
 215:Src/usbd_hid.c ****     0x91, 0x00,         // Output (Data)
 216:Src/usbd_hid.c ****     0xC0,               // End Collection
 217:Src/usbd_hid.c ****     
 218:Src/usbd_hid.c ****     // Effect Parameters
 219:Src/usbd_hid.c ****     0x09, 0x50,         // Usage (Duration)
 220:Src/usbd_hid.c ****     0x09, 0x54,         // Usage (Trigger Button)
 221:Src/usbd_hid.c ****     0x09, 0x51,         // Usage (Sample Period)
 222:Src/usbd_hid.c ****     0x15, 0x00,         // Logical Minimum (0)
 223:Src/usbd_hid.c ****     0x26, 0xFF, 0x7F,   // Logical Maximum (32767)
 224:Src/usbd_hid.c ****     0x75, 0x10,         // Report Size (16)
 225:Src/usbd_hid.c ****     0x95, 0x03,         // Report Count (3)
 226:Src/usbd_hid.c ****     0x91, 0x02,         // Output (Data, Variable, Absolute)
 227:Src/usbd_hid.c ****     
 228:Src/usbd_hid.c ****     // Effect Operation Report
 229:Src/usbd_hid.c ****     0x09, 0xA7,         // Usage (Start Delay)
 230:Src/usbd_hid.c ****     0x15, 0x00,         // Logical Minimum (0)
 231:Src/usbd_hid.c ****     0x26, 0xFF, 0x7F,   // Logical Maximum (32767)
 232:Src/usbd_hid.c ****     0x75, 0x10,         // Report Size (16)
 233:Src/usbd_hid.c ****     0x95, 0x01,         // Report Count (1)
 234:Src/usbd_hid.c ****     0x91, 0x02,         // Output (Data, Variable, Absolute)
 235:Src/usbd_hid.c ****     0xC0,               // End Collection
 236:Src/usbd_hid.c ****     
 237:Src/usbd_hid.c ****     0xC0                // End Collection (Application)
 238:Src/usbd_hid.c **** };
 239:Src/usbd_hid.c **** 
 240:Src/usbd_hid.c **** static uint8_t HIDInEpAdd = HID_EPIN_ADDR;
 241:Src/usbd_hid.c **** 
 242:Src/usbd_hid.c **** static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
 243:Src/usbd_hid.c **** {
 244:Src/usbd_hid.c ****   UNUSED(cfgidx);
 245:Src/usbd_hid.c **** 
 246:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid;
 247:Src/usbd_hid.c **** 
 248:Src/usbd_hid.c ****   hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 249:Src/usbd_hid.c **** 
 250:Src/usbd_hid.c ****   if (hhid == NULL)
 251:Src/usbd_hid.c ****   {
 252:Src/usbd_hid.c ****     pdev->pClassDataCmsit[pdev->classId] = NULL;
 253:Src/usbd_hid.c ****     return (uint8_t)USBD_EMEM;
 254:Src/usbd_hid.c ****   }
 255:Src/usbd_hid.c **** 
 256:Src/usbd_hid.c ****   pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 257:Src/usbd_hid.c ****   pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 258:Src/usbd_hid.c **** 
ARM GAS  /tmp/ccrUoaPi.s 			page 6


 259:Src/usbd_hid.c **** #ifdef USE_USBD_COMPOSITE
 260:Src/usbd_hid.c ****   /* Get the Endpoints addresses allocated for this class instance */
 261:Src/usbd_hid.c ****   HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 262:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE */
 263:Src/usbd_hid.c **** 
 264:Src/usbd_hid.c ****   if (pdev->dev_speed == USBD_SPEED_HIGH)
 265:Src/usbd_hid.c ****   {
 266:Src/usbd_hid.c ****     pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 267:Src/usbd_hid.c ****   }
 268:Src/usbd_hid.c ****   else   /* LOW and FULL-speed endpoints */
 269:Src/usbd_hid.c ****   {
 270:Src/usbd_hid.c ****     pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 271:Src/usbd_hid.c ****   }
 272:Src/usbd_hid.c **** 
 273:Src/usbd_hid.c ****   /* Open EP IN */
 274:Src/usbd_hid.c ****   (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 275:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 276:Src/usbd_hid.c **** 
 277:Src/usbd_hid.c ****   hhid->state = USBD_HID_IDLE;
 278:Src/usbd_hid.c **** 
 279:Src/usbd_hid.c ****   return (uint8_t)USBD_OK;
 280:Src/usbd_hid.c **** }
 281:Src/usbd_hid.c **** 
 282:Src/usbd_hid.c **** /**
 283:Src/usbd_hid.c ****   * @brief  USBD_HID_DeInit
 284:Src/usbd_hid.c ****   *         DeInitialize the HID layer
 285:Src/usbd_hid.c ****   * @param  pdev: device instance
 286:Src/usbd_hid.c ****   * @param  cfgidx: Configuration index
 287:Src/usbd_hid.c ****   * @retval status
 288:Src/usbd_hid.c ****   */
 289:Src/usbd_hid.c **** static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
 290:Src/usbd_hid.c **** {
 291:Src/usbd_hid.c ****   UNUSED(cfgidx);
 292:Src/usbd_hid.c **** 
 293:Src/usbd_hid.c **** #ifdef USE_USBD_COMPOSITE
 294:Src/usbd_hid.c ****   /* Get the Endpoints addresses allocated for this class instance */
 295:Src/usbd_hid.c ****   HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
 296:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE */
 297:Src/usbd_hid.c **** 
 298:Src/usbd_hid.c ****   /* Close HID EPs */
 299:Src/usbd_hid.c ****   (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 300:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 301:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 302:Src/usbd_hid.c **** 
 303:Src/usbd_hid.c ****   /* Free allocated memory */
 304:Src/usbd_hid.c ****   if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 305:Src/usbd_hid.c ****   {
 306:Src/usbd_hid.c ****     (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 307:Src/usbd_hid.c ****     pdev->pClassDataCmsit[pdev->classId] = NULL;
 308:Src/usbd_hid.c ****   }
 309:Src/usbd_hid.c **** 
 310:Src/usbd_hid.c ****   return (uint8_t)USBD_OK;
 311:Src/usbd_hid.c **** }
 312:Src/usbd_hid.c **** 
 313:Src/usbd_hid.c **** /**
 314:Src/usbd_hid.c ****   * @brief  USBD_HID_Setup
 315:Src/usbd_hid.c ****   *         Handle the HID specific requests
ARM GAS  /tmp/ccrUoaPi.s 			page 7


 316:Src/usbd_hid.c ****   * @param  pdev: instance
 317:Src/usbd_hid.c ****   * @param  req: usb requests
 318:Src/usbd_hid.c ****   * @retval status
 319:Src/usbd_hid.c ****   */
 320:Src/usbd_hid.c **** static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 321:Src/usbd_hid.c **** {
 322:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 323:Src/usbd_hid.c ****   USBD_StatusTypeDef ret = USBD_OK;
 324:Src/usbd_hid.c ****   uint16_t len;
 325:Src/usbd_hid.c ****   uint8_t *pbuf;
 326:Src/usbd_hid.c ****   uint16_t status_info = 0U;
 327:Src/usbd_hid.c **** 
 328:Src/usbd_hid.c ****   if (hhid == NULL)
 329:Src/usbd_hid.c ****   {
 330:Src/usbd_hid.c ****     return (uint8_t)USBD_FAIL;
 331:Src/usbd_hid.c ****   }
 332:Src/usbd_hid.c **** 
 333:Src/usbd_hid.c ****   switch (req->bmRequest & USB_REQ_TYPE_MASK)
 334:Src/usbd_hid.c ****   {
 335:Src/usbd_hid.c ****     case USB_REQ_TYPE_CLASS :
 336:Src/usbd_hid.c ****       switch (req->bRequest)
 337:Src/usbd_hid.c ****       {
 338:Src/usbd_hid.c ****         case USBD_HID_REQ_SET_PROTOCOL:
 339:Src/usbd_hid.c ****           hhid->Protocol = (uint8_t)(req->wValue);
 340:Src/usbd_hid.c ****           break;
 341:Src/usbd_hid.c **** 
 342:Src/usbd_hid.c ****         case USBD_HID_REQ_GET_PROTOCOL:
 343:Src/usbd_hid.c ****           (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 344:Src/usbd_hid.c ****           break;
 345:Src/usbd_hid.c **** 
 346:Src/usbd_hid.c ****         case USBD_HID_REQ_SET_IDLE:
 347:Src/usbd_hid.c ****           hhid->IdleState = (uint8_t)(req->wValue >> 8);
 348:Src/usbd_hid.c ****           break;
 349:Src/usbd_hid.c **** 
 350:Src/usbd_hid.c ****         case USBD_HID_REQ_GET_IDLE:
 351:Src/usbd_hid.c ****           (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 352:Src/usbd_hid.c ****           break;
 353:Src/usbd_hid.c **** 
 354:Src/usbd_hid.c ****         default:
 355:Src/usbd_hid.c ****           USBD_CtlError(pdev, req);
 356:Src/usbd_hid.c ****           ret = USBD_FAIL;
 357:Src/usbd_hid.c ****           break;
 358:Src/usbd_hid.c ****       }
 359:Src/usbd_hid.c ****       break;
 360:Src/usbd_hid.c ****     case USB_REQ_TYPE_STANDARD:
 361:Src/usbd_hid.c ****       switch (req->bRequest)
 362:Src/usbd_hid.c ****       {
 363:Src/usbd_hid.c ****         case USB_REQ_GET_STATUS:
 364:Src/usbd_hid.c ****           if (pdev->dev_state == USBD_STATE_CONFIGURED)
 365:Src/usbd_hid.c ****           {
 366:Src/usbd_hid.c ****             (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 367:Src/usbd_hid.c ****           }
 368:Src/usbd_hid.c ****           else
 369:Src/usbd_hid.c ****           {
 370:Src/usbd_hid.c ****             USBD_CtlError(pdev, req);
 371:Src/usbd_hid.c ****             ret = USBD_FAIL;
 372:Src/usbd_hid.c ****           }
ARM GAS  /tmp/ccrUoaPi.s 			page 8


 373:Src/usbd_hid.c ****           break;
 374:Src/usbd_hid.c **** 
 375:Src/usbd_hid.c ****         case USB_REQ_GET_DESCRIPTOR:
 376:Src/usbd_hid.c ****           if ((req->wValue >> 8) == HID_REPORT_DESC)
 377:Src/usbd_hid.c ****           {
 378:Src/usbd_hid.c ****             len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 379:Src/usbd_hid.c ****             pbuf = HID_MOUSE_ReportDesc;
 380:Src/usbd_hid.c ****           }
 381:Src/usbd_hid.c ****           else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 382:Src/usbd_hid.c ****           {
 383:Src/usbd_hid.c ****             pbuf = USBD_HID_Desc;
 384:Src/usbd_hid.c ****             len = MIN(USB_HID_DESC_SIZ, req->wLength);
 385:Src/usbd_hid.c ****           }
 386:Src/usbd_hid.c ****           else
 387:Src/usbd_hid.c ****           {
 388:Src/usbd_hid.c ****             USBD_CtlError(pdev, req);
 389:Src/usbd_hid.c ****             ret = USBD_FAIL;
 390:Src/usbd_hid.c ****             break;
 391:Src/usbd_hid.c ****           }
 392:Src/usbd_hid.c ****           (void)USBD_CtlSendData(pdev, pbuf, len);
 393:Src/usbd_hid.c ****           break;
 394:Src/usbd_hid.c **** 
 395:Src/usbd_hid.c ****         case USB_REQ_GET_INTERFACE :
 396:Src/usbd_hid.c ****           if (pdev->dev_state == USBD_STATE_CONFIGURED)
 397:Src/usbd_hid.c ****           {
 398:Src/usbd_hid.c ****             (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 399:Src/usbd_hid.c ****           }
 400:Src/usbd_hid.c ****           else
 401:Src/usbd_hid.c ****           {
 402:Src/usbd_hid.c ****             USBD_CtlError(pdev, req);
 403:Src/usbd_hid.c ****             ret = USBD_FAIL;
 404:Src/usbd_hid.c ****           }
 405:Src/usbd_hid.c ****           break;
 406:Src/usbd_hid.c **** 
 407:Src/usbd_hid.c ****         case USB_REQ_SET_INTERFACE:
 408:Src/usbd_hid.c ****           if (pdev->dev_state == USBD_STATE_CONFIGURED)
 409:Src/usbd_hid.c ****           {
 410:Src/usbd_hid.c ****             hhid->AltSetting = (uint8_t)(req->wValue);
 411:Src/usbd_hid.c ****           }
 412:Src/usbd_hid.c ****           else
 413:Src/usbd_hid.c ****           {
 414:Src/usbd_hid.c ****             USBD_CtlError(pdev, req);
 415:Src/usbd_hid.c ****             ret = USBD_FAIL;
 416:Src/usbd_hid.c ****           }
 417:Src/usbd_hid.c ****           break;
 418:Src/usbd_hid.c **** 
 419:Src/usbd_hid.c ****         case USB_REQ_CLEAR_FEATURE:
 420:Src/usbd_hid.c ****           break;
 421:Src/usbd_hid.c **** 
 422:Src/usbd_hid.c ****         default:
 423:Src/usbd_hid.c ****           USBD_CtlError(pdev, req);
 424:Src/usbd_hid.c ****           ret = USBD_FAIL;
 425:Src/usbd_hid.c ****           break;
 426:Src/usbd_hid.c ****       }
 427:Src/usbd_hid.c ****       break;
 428:Src/usbd_hid.c **** 
 429:Src/usbd_hid.c ****     default:
ARM GAS  /tmp/ccrUoaPi.s 			page 9


 430:Src/usbd_hid.c ****       USBD_CtlError(pdev, req);
 431:Src/usbd_hid.c ****       ret = USBD_FAIL;
 432:Src/usbd_hid.c ****       break;
 433:Src/usbd_hid.c ****   }
 434:Src/usbd_hid.c **** 
 435:Src/usbd_hid.c ****   return (uint8_t)ret;
 436:Src/usbd_hid.c **** }
 437:Src/usbd_hid.c **** 
 438:Src/usbd_hid.c **** 
 439:Src/usbd_hid.c **** /**
 440:Src/usbd_hid.c ****   * @brief  USBD_HID_SendReport
 441:Src/usbd_hid.c ****   *         Send HID Report
 442:Src/usbd_hid.c ****   * @param  pdev: device instance
 443:Src/usbd_hid.c ****   * @param  buff: pointer to report
 444:Src/usbd_hid.c ****   * @param  ClassId: The Class ID
 445:Src/usbd_hid.c ****   * @retval status
 446:Src/usbd_hid.c ****   */
 447:Src/usbd_hid.c **** #ifdef USE_USBD_COMPOSITE
 448:Src/usbd_hid.c **** uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassI
 449:Src/usbd_hid.c **** {
 450:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
 451:Src/usbd_hid.c **** #else
 452:Src/usbd_hid.c **** uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
 453:Src/usbd_hid.c **** {
 454:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 455:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE */
 456:Src/usbd_hid.c **** 
 457:Src/usbd_hid.c ****   if (hhid == NULL)
 458:Src/usbd_hid.c ****   {
 459:Src/usbd_hid.c ****     return (uint8_t)USBD_FAIL;
 460:Src/usbd_hid.c ****   }
 461:Src/usbd_hid.c **** 
 462:Src/usbd_hid.c **** #ifdef USE_USBD_COMPOSITE
 463:Src/usbd_hid.c ****   /* Get the Endpoints addresses allocated for this class instance */
 464:Src/usbd_hid.c ****   HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
 465:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE */
 466:Src/usbd_hid.c **** 
 467:Src/usbd_hid.c ****   if (pdev->dev_state == USBD_STATE_CONFIGURED)
 468:Src/usbd_hid.c ****   {
 469:Src/usbd_hid.c ****     if (hhid->state == USBD_HID_IDLE)
 470:Src/usbd_hid.c ****     {
 471:Src/usbd_hid.c ****       hhid->state = USBD_HID_BUSY;
 472:Src/usbd_hid.c ****       (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 473:Src/usbd_hid.c ****     }
 474:Src/usbd_hid.c ****   }
 475:Src/usbd_hid.c **** 
 476:Src/usbd_hid.c ****   return (uint8_t)USBD_OK;
 477:Src/usbd_hid.c **** }
 478:Src/usbd_hid.c **** 
 479:Src/usbd_hid.c **** /**
 480:Src/usbd_hid.c ****   * @brief  USBD_HID_GetPollingInterval
 481:Src/usbd_hid.c ****   *         return polling interval from endpoint descriptor
 482:Src/usbd_hid.c ****   * @param  pdev: device instance
 483:Src/usbd_hid.c ****   * @retval polling interval
 484:Src/usbd_hid.c ****   */
 485:Src/usbd_hid.c **** uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
 486:Src/usbd_hid.c **** {
ARM GAS  /tmp/ccrUoaPi.s 			page 10


 487:Src/usbd_hid.c ****   uint32_t polling_interval;
 488:Src/usbd_hid.c **** 
 489:Src/usbd_hid.c ****   /* HIGH-speed endpoints */
 490:Src/usbd_hid.c ****   if (pdev->dev_speed == USBD_SPEED_HIGH)
 491:Src/usbd_hid.c ****   {
 492:Src/usbd_hid.c ****     /* Sets the data transfer polling interval for high speed transfers.
 493:Src/usbd_hid.c ****      Values between 1..16 are allowed. Values correspond to interval
 494:Src/usbd_hid.c ****      of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
 495:Src/usbd_hid.c ****     polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 496:Src/usbd_hid.c ****   }
 497:Src/usbd_hid.c ****   else   /* LOW and FULL-speed endpoints */
 498:Src/usbd_hid.c ****   {
 499:Src/usbd_hid.c ****     /* Sets the data transfer polling interval for low and full
 500:Src/usbd_hid.c ****     speed transfers */
 501:Src/usbd_hid.c ****     polling_interval =  HID_FS_BINTERVAL;
 502:Src/usbd_hid.c ****   }
 503:Src/usbd_hid.c **** 
 504:Src/usbd_hid.c ****   return ((uint32_t)(polling_interval));
 505:Src/usbd_hid.c **** }
 506:Src/usbd_hid.c **** 
 507:Src/usbd_hid.c **** #ifndef USE_USBD_COMPOSITE
 508:Src/usbd_hid.c **** /**
 509:Src/usbd_hid.c ****   * @brief  USBD_HID_GetCfgFSDesc
 510:Src/usbd_hid.c ****   *         return FS configuration descriptor
 511:Src/usbd_hid.c ****   * @param  speed : current device speed
 512:Src/usbd_hid.c ****   * @param  length : pointer data length
 513:Src/usbd_hid.c ****   * @retval pointer to descriptor buffer
 514:Src/usbd_hid.c ****   */
 515:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
 516:Src/usbd_hid.c **** {
 517:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 518:Src/usbd_hid.c **** 
 519:Src/usbd_hid.c ****   if (pEpDesc != NULL)
 520:Src/usbd_hid.c ****   {
 521:Src/usbd_hid.c ****     pEpDesc->bInterval = HID_FS_BINTERVAL;
 522:Src/usbd_hid.c ****   }
 523:Src/usbd_hid.c **** 
 524:Src/usbd_hid.c ****   *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 525:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 526:Src/usbd_hid.c **** }
 527:Src/usbd_hid.c **** 
 528:Src/usbd_hid.c **** /**
 529:Src/usbd_hid.c ****   * @brief  USBD_HID_GetCfgHSDesc
 530:Src/usbd_hid.c ****   *         return HS configuration descriptor
 531:Src/usbd_hid.c ****   * @param  speed : current device speed
 532:Src/usbd_hid.c ****   * @param  length : pointer data length
 533:Src/usbd_hid.c ****   * @retval pointer to descriptor buffer
 534:Src/usbd_hid.c ****   */
 535:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
 536:Src/usbd_hid.c **** {
 537:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 538:Src/usbd_hid.c **** 
 539:Src/usbd_hid.c ****   if (pEpDesc != NULL)
 540:Src/usbd_hid.c ****   {
 541:Src/usbd_hid.c ****     pEpDesc->bInterval = HID_HS_BINTERVAL;
 542:Src/usbd_hid.c ****   }
 543:Src/usbd_hid.c **** 
ARM GAS  /tmp/ccrUoaPi.s 			page 11


 544:Src/usbd_hid.c ****   *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 545:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 546:Src/usbd_hid.c **** }
 547:Src/usbd_hid.c **** 
 548:Src/usbd_hid.c **** /**
 549:Src/usbd_hid.c ****   * @brief  USBD_HID_GetOtherSpeedCfgDesc
 550:Src/usbd_hid.c ****   *         return other speed configuration descriptor
 551:Src/usbd_hid.c ****   * @param  speed : current device speed
 552:Src/usbd_hid.c ****   * @param  length : pointer data length
 553:Src/usbd_hid.c ****   * @retval pointer to descriptor buffer
 554:Src/usbd_hid.c ****   */
 555:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
 556:Src/usbd_hid.c **** {
 557:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 558:Src/usbd_hid.c **** 
 559:Src/usbd_hid.c ****   if (pEpDesc != NULL)
 560:Src/usbd_hid.c ****   {
 561:Src/usbd_hid.c ****     pEpDesc->bInterval = HID_FS_BINTERVAL;
 562:Src/usbd_hid.c ****   }
 563:Src/usbd_hid.c **** 
 564:Src/usbd_hid.c ****   *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 565:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 566:Src/usbd_hid.c **** }
 567:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE  */
 568:Src/usbd_hid.c **** 
 569:Src/usbd_hid.c **** /**
 570:Src/usbd_hid.c ****   * @brief  USBD_HID_DataIn
 571:Src/usbd_hid.c ****   *         handle data IN Stage
 572:Src/usbd_hid.c ****   * @param  pdev: device instance
 573:Src/usbd_hid.c ****   * @param  epnum: endpoint index
 574:Src/usbd_hid.c ****   * @retval status
 575:Src/usbd_hid.c ****   */
 576:Src/usbd_hid.c **** static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
 577:Src/usbd_hid.c **** {
  29              		.loc 1 577 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 578:Src/usbd_hid.c ****   UNUSED(epnum);
  34              		.loc 1 578 3 view .LVU1
 579:Src/usbd_hid.c ****   /* Ensure that the FIFO is empty before a new transfer, this condition could
 580:Src/usbd_hid.c ****   be caused by  a new transfer before the end of the previous transfer */
 581:Src/usbd_hid.c ****   ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
  35              		.loc 1 581 3 view .LVU2
  36              		.loc 1 581 56 is_stmt 0 view .LVU3
  37 0000 D0F8D432 		ldr	r3, [r0, #724]
  38              		.loc 1 581 51 view .LVU4
  39 0004 B033     		adds	r3, r3, #176
  40 0006 50F82330 		ldr	r3, [r0, r3, lsl #2]
  41              		.loc 1 581 75 view .LVU5
  42 000a 0020     		movs	r0, #0
  43              	.LVL1:
  44              		.loc 1 581 75 view .LVU6
  45 000c 1873     		strb	r0, [r3, #12]
 582:Src/usbd_hid.c **** 
 583:Src/usbd_hid.c ****   return (uint8_t)USBD_OK;
ARM GAS  /tmp/ccrUoaPi.s 			page 12


  46              		.loc 1 583 3 is_stmt 1 view .LVU7
 584:Src/usbd_hid.c **** }
  47              		.loc 1 584 1 is_stmt 0 view .LVU8
  48 000e 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE146:
  52              		.section	.text.USBD_HID_GetDeviceQualifierDesc,"ax",%progbits
  53              		.align	1
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	USBD_HID_GetDeviceQualifierDesc:
  60              	.LVL2:
  61              	.LFB147:
 585:Src/usbd_hid.c **** 
 586:Src/usbd_hid.c **** #ifndef USE_USBD_COMPOSITE
 587:Src/usbd_hid.c **** /**
 588:Src/usbd_hid.c ****   * @brief  DeviceQualifierDescriptor
 589:Src/usbd_hid.c ****   *         return Device Qualifier descriptor
 590:Src/usbd_hid.c ****   * @param  length : pointer data length
 591:Src/usbd_hid.c ****   * @retval pointer to descriptor buffer
 592:Src/usbd_hid.c ****   */
 593:Src/usbd_hid.c **** static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
 594:Src/usbd_hid.c **** {
  62              		.loc 1 594 1 is_stmt 1 view -0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              		@ link register save eliminated.
 595:Src/usbd_hid.c ****   *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
  67              		.loc 1 595 3 view .LVU10
  68              		.loc 1 595 11 is_stmt 0 view .LVU11
  69 0000 0A23     		movs	r3, #10
  70 0002 0380     		strh	r3, [r0]	@ movhi
 596:Src/usbd_hid.c **** 
 597:Src/usbd_hid.c ****   return USBD_HID_DeviceQualifierDesc;
  71              		.loc 1 597 3 is_stmt 1 view .LVU12
 598:Src/usbd_hid.c **** }
  72              		.loc 1 598 1 is_stmt 0 view .LVU13
  73 0004 0048     		ldr	r0, .L3
  74              	.LVL3:
  75              		.loc 1 598 1 view .LVU14
  76 0006 7047     		bx	lr
  77              	.L4:
  78              		.align	2
  79              	.L3:
  80 0008 00000000 		.word	.LANCHOR0
  81              		.cfi_endproc
  82              	.LFE147:
  84              		.section	.text.USBD_HID_GetOtherSpeedCfgDesc,"ax",%progbits
  85              		.align	1
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu fpv4-sp-d16
  91              	USBD_HID_GetOtherSpeedCfgDesc:
ARM GAS  /tmp/ccrUoaPi.s 			page 13


  92              	.LVL4:
  93              	.LFB145:
 556:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
  94              		.loc 1 556 1 is_stmt 1 view -0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
 556:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
  98              		.loc 1 556 1 is_stmt 0 view .LVU16
  99 0000 10B5     		push	{r4, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 4, -8
 103              		.cfi_offset 14, -4
 104 0002 0446     		mov	r4, r0
 557:Src/usbd_hid.c **** 
 105              		.loc 1 557 3 is_stmt 1 view .LVU17
 557:Src/usbd_hid.c **** 
 106              		.loc 1 557 33 is_stmt 0 view .LVU18
 107 0004 8121     		movs	r1, #129
 108 0006 0548     		ldr	r0, .L8
 109              	.LVL5:
 557:Src/usbd_hid.c **** 
 110              		.loc 1 557 33 view .LVU19
 111 0008 FFF7FEFF 		bl	USBD_GetEpDesc
 112              	.LVL6:
 559:Src/usbd_hid.c ****   {
 113              		.loc 1 559 3 is_stmt 1 view .LVU20
 559:Src/usbd_hid.c ****   {
 114              		.loc 1 559 6 is_stmt 0 view .LVU21
 115 000c 08B1     		cbz	r0, .L6
 561:Src/usbd_hid.c ****   }
 116              		.loc 1 561 5 is_stmt 1 view .LVU22
 561:Src/usbd_hid.c ****   }
 117              		.loc 1 561 24 is_stmt 0 view .LVU23
 118 000e 0122     		movs	r2, #1
 119 0010 8271     		strb	r2, [r0, #6]
 120              	.L6:
 564:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 121              		.loc 1 564 3 is_stmt 1 view .LVU24
 564:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 122              		.loc 1 564 11 is_stmt 0 view .LVU25
 123 0012 2223     		movs	r3, #34
 124 0014 2380     		strh	r3, [r4]	@ movhi
 565:Src/usbd_hid.c **** }
 125              		.loc 1 565 3 is_stmt 1 view .LVU26
 566:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE  */
 126              		.loc 1 566 1 is_stmt 0 view .LVU27
 127 0016 0148     		ldr	r0, .L8
 128              	.LVL7:
 566:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE  */
 129              		.loc 1 566 1 view .LVU28
 130 0018 10BD     		pop	{r4, pc}
 131              	.LVL8:
 132              	.L9:
 566:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE  */
 133              		.loc 1 566 1 view .LVU29
ARM GAS  /tmp/ccrUoaPi.s 			page 14


 134 001a 00BF     		.align	2
 135              	.L8:
 136 001c 00000000 		.word	.LANCHOR1
 137              		.cfi_endproc
 138              	.LFE145:
 140              		.section	.text.USBD_HID_GetFSCfgDesc,"ax",%progbits
 141              		.align	1
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv4-sp-d16
 147              	USBD_HID_GetFSCfgDesc:
 148              	.LVL9:
 149              	.LFB143:
 516:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 150              		.loc 1 516 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 516:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 154              		.loc 1 516 1 is_stmt 0 view .LVU31
 155 0000 10B5     		push	{r4, lr}
 156              	.LCFI1:
 157              		.cfi_def_cfa_offset 8
 158              		.cfi_offset 4, -8
 159              		.cfi_offset 14, -4
 160 0002 0446     		mov	r4, r0
 517:Src/usbd_hid.c **** 
 161              		.loc 1 517 3 is_stmt 1 view .LVU32
 517:Src/usbd_hid.c **** 
 162              		.loc 1 517 33 is_stmt 0 view .LVU33
 163 0004 8121     		movs	r1, #129
 164 0006 0548     		ldr	r0, .L13
 165              	.LVL10:
 517:Src/usbd_hid.c **** 
 166              		.loc 1 517 33 view .LVU34
 167 0008 FFF7FEFF 		bl	USBD_GetEpDesc
 168              	.LVL11:
 519:Src/usbd_hid.c ****   {
 169              		.loc 1 519 3 is_stmt 1 view .LVU35
 519:Src/usbd_hid.c ****   {
 170              		.loc 1 519 6 is_stmt 0 view .LVU36
 171 000c 08B1     		cbz	r0, .L11
 521:Src/usbd_hid.c ****   }
 172              		.loc 1 521 5 is_stmt 1 view .LVU37
 521:Src/usbd_hid.c ****   }
 173              		.loc 1 521 24 is_stmt 0 view .LVU38
 174 000e 0122     		movs	r2, #1
 175 0010 8271     		strb	r2, [r0, #6]
 176              	.L11:
 524:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 177              		.loc 1 524 3 is_stmt 1 view .LVU39
 524:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 178              		.loc 1 524 11 is_stmt 0 view .LVU40
 179 0012 2223     		movs	r3, #34
 180 0014 2380     		strh	r3, [r4]	@ movhi
 525:Src/usbd_hid.c **** }
ARM GAS  /tmp/ccrUoaPi.s 			page 15


 181              		.loc 1 525 3 is_stmt 1 view .LVU41
 526:Src/usbd_hid.c **** 
 182              		.loc 1 526 1 is_stmt 0 view .LVU42
 183 0016 0148     		ldr	r0, .L13
 184              	.LVL12:
 526:Src/usbd_hid.c **** 
 185              		.loc 1 526 1 view .LVU43
 186 0018 10BD     		pop	{r4, pc}
 187              	.LVL13:
 188              	.L14:
 526:Src/usbd_hid.c **** 
 189              		.loc 1 526 1 view .LVU44
 190 001a 00BF     		.align	2
 191              	.L13:
 192 001c 00000000 		.word	.LANCHOR1
 193              		.cfi_endproc
 194              	.LFE143:
 196              		.section	.text.USBD_HID_GetHSCfgDesc,"ax",%progbits
 197              		.align	1
 198              		.syntax unified
 199              		.thumb
 200              		.thumb_func
 201              		.fpu fpv4-sp-d16
 203              	USBD_HID_GetHSCfgDesc:
 204              	.LVL14:
 205              	.LFB144:
 536:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 206              		.loc 1 536 1 is_stmt 1 view -0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 536:Src/usbd_hid.c ****   USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 210              		.loc 1 536 1 is_stmt 0 view .LVU46
 211 0000 10B5     		push	{r4, lr}
 212              	.LCFI2:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 4, -8
 215              		.cfi_offset 14, -4
 216 0002 0446     		mov	r4, r0
 537:Src/usbd_hid.c **** 
 217              		.loc 1 537 3 is_stmt 1 view .LVU47
 537:Src/usbd_hid.c **** 
 218              		.loc 1 537 33 is_stmt 0 view .LVU48
 219 0004 8121     		movs	r1, #129
 220 0006 0548     		ldr	r0, .L18
 221              	.LVL15:
 537:Src/usbd_hid.c **** 
 222              		.loc 1 537 33 view .LVU49
 223 0008 FFF7FEFF 		bl	USBD_GetEpDesc
 224              	.LVL16:
 539:Src/usbd_hid.c ****   {
 225              		.loc 1 539 3 is_stmt 1 view .LVU50
 539:Src/usbd_hid.c ****   {
 226              		.loc 1 539 6 is_stmt 0 view .LVU51
 227 000c 08B1     		cbz	r0, .L16
 541:Src/usbd_hid.c ****   }
 228              		.loc 1 541 5 is_stmt 1 view .LVU52
ARM GAS  /tmp/ccrUoaPi.s 			page 16


 541:Src/usbd_hid.c ****   }
 229              		.loc 1 541 24 is_stmt 0 view .LVU53
 230 000e 0722     		movs	r2, #7
 231 0010 8271     		strb	r2, [r0, #6]
 232              	.L16:
 544:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 233              		.loc 1 544 3 is_stmt 1 view .LVU54
 544:Src/usbd_hid.c ****   return USBD_HID_CfgDesc;
 234              		.loc 1 544 11 is_stmt 0 view .LVU55
 235 0012 2223     		movs	r3, #34
 236 0014 2380     		strh	r3, [r4]	@ movhi
 545:Src/usbd_hid.c **** }
 237              		.loc 1 545 3 is_stmt 1 view .LVU56
 546:Src/usbd_hid.c **** 
 238              		.loc 1 546 1 is_stmt 0 view .LVU57
 239 0016 0148     		ldr	r0, .L18
 240              	.LVL17:
 546:Src/usbd_hid.c **** 
 241              		.loc 1 546 1 view .LVU58
 242 0018 10BD     		pop	{r4, pc}
 243              	.LVL18:
 244              	.L19:
 546:Src/usbd_hid.c **** 
 245              		.loc 1 546 1 view .LVU59
 246 001a 00BF     		.align	2
 247              	.L18:
 248 001c 00000000 		.word	.LANCHOR1
 249              		.cfi_endproc
 250              	.LFE144:
 252              		.section	.text.USBD_HID_Setup,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	USBD_HID_Setup:
 260              	.LVL19:
 261              	.LFB140:
 321:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 262              		.loc 1 321 1 is_stmt 1 view -0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 8
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 321:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 266              		.loc 1 321 1 is_stmt 0 view .LVU61
 267 0000 30B5     		push	{r4, r5, lr}
 268              	.LCFI3:
 269              		.cfi_def_cfa_offset 12
 270              		.cfi_offset 4, -12
 271              		.cfi_offset 5, -8
 272              		.cfi_offset 14, -4
 273 0002 83B0     		sub	sp, sp, #12
 274              	.LCFI4:
 275              		.cfi_def_cfa_offset 24
 322:Src/usbd_hid.c ****   USBD_StatusTypeDef ret = USBD_OK;
 276              		.loc 1 322 3 is_stmt 1 view .LVU62
 322:Src/usbd_hid.c ****   USBD_StatusTypeDef ret = USBD_OK;
ARM GAS  /tmp/ccrUoaPi.s 			page 17


 277              		.loc 1 322 86 is_stmt 0 view .LVU63
 278 0004 D0F8D432 		ldr	r3, [r0, #724]
 322:Src/usbd_hid.c ****   USBD_StatusTypeDef ret = USBD_OK;
 279              		.loc 1 322 27 view .LVU64
 280 0008 B033     		adds	r3, r3, #176
 281 000a 50F82330 		ldr	r3, [r0, r3, lsl #2]
 282              	.LVL20:
 323:Src/usbd_hid.c ****   uint16_t len;
 283              		.loc 1 323 3 is_stmt 1 view .LVU65
 324:Src/usbd_hid.c ****   uint8_t *pbuf;
 284              		.loc 1 324 3 view .LVU66
 325:Src/usbd_hid.c ****   uint16_t status_info = 0U;
 285              		.loc 1 325 3 view .LVU67
 326:Src/usbd_hid.c **** 
 286              		.loc 1 326 3 view .LVU68
 326:Src/usbd_hid.c **** 
 287              		.loc 1 326 12 is_stmt 0 view .LVU69
 288 000e 0022     		movs	r2, #0
 289 0010 ADF80620 		strh	r2, [sp, #6]	@ movhi
 328:Src/usbd_hid.c ****   {
 290              		.loc 1 328 3 is_stmt 1 view .LVU70
 328:Src/usbd_hid.c ****   {
 291              		.loc 1 328 6 is_stmt 0 view .LVU71
 292 0014 002B     		cmp	r3, #0
 293 0016 00F08280 		beq	.L42
 333:Src/usbd_hid.c ****   {
 294              		.loc 1 333 3 is_stmt 1 view .LVU72
 333:Src/usbd_hid.c ****   {
 295              		.loc 1 333 14 is_stmt 0 view .LVU73
 296 001a 0C78     		ldrb	r4, [r1]	@ zero_extendqisi2
 333:Src/usbd_hid.c ****   {
 297              		.loc 1 333 3 view .LVU74
 298 001c 14F06004 		ands	r4, r4, #96
 299 0020 25D0     		beq	.L22
 300 0022 202C     		cmp	r4, #32
 301 0024 75D1     		bne	.L23
 336:Src/usbd_hid.c ****       {
 302              		.loc 1 336 7 is_stmt 1 view .LVU75
 336:Src/usbd_hid.c ****       {
 303              		.loc 1 336 18 is_stmt 0 view .LVU76
 304 0026 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 305 0028 023A     		subs	r2, r2, #2
 306 002a 092A     		cmp	r2, #9
 307 002c 1BD8     		bhi	.L24
 308 002e DFE802F0 		tbb	[pc, r2]
 309              	.L26:
 310 0032 14       		.byte	(.L29-.L26)/2
 311 0033 09       		.byte	(.L28-.L26)/2
 312 0034 1A       		.byte	(.L24-.L26)/2
 313 0035 1A       		.byte	(.L24-.L26)/2
 314 0036 1A       		.byte	(.L24-.L26)/2
 315 0037 1A       		.byte	(.L24-.L26)/2
 316 0038 1A       		.byte	(.L24-.L26)/2
 317 0039 1A       		.byte	(.L24-.L26)/2
 318 003a 0F       		.byte	(.L27-.L26)/2
 319 003b 05       		.byte	(.L25-.L26)/2
 320              		.p2align 1
ARM GAS  /tmp/ccrUoaPi.s 			page 18


 321              	.L25:
 339:Src/usbd_hid.c ****           break;
 322              		.loc 1 339 11 is_stmt 1 view .LVU77
 339:Src/usbd_hid.c ****           break;
 323              		.loc 1 339 28 is_stmt 0 view .LVU78
 324 003c 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 339:Src/usbd_hid.c ****           break;
 325              		.loc 1 339 26 view .LVU79
 326 003e 1A60     		str	r2, [r3]
 340:Src/usbd_hid.c **** 
 327              		.loc 1 340 11 is_stmt 1 view .LVU80
 323:Src/usbd_hid.c ****   uint16_t len;
 328              		.loc 1 323 22 is_stmt 0 view .LVU81
 329 0040 0024     		movs	r4, #0
 340:Src/usbd_hid.c **** 
 330              		.loc 1 340 11 view .LVU82
 331 0042 69E0     		b	.L21
 332              	.L28:
 343:Src/usbd_hid.c ****           break;
 333              		.loc 1 343 11 is_stmt 1 view .LVU83
 343:Src/usbd_hid.c ****           break;
 334              		.loc 1 343 17 is_stmt 0 view .LVU84
 335 0044 0122     		movs	r2, #1
 336 0046 1946     		mov	r1, r3
 337              	.LVL21:
 343:Src/usbd_hid.c ****           break;
 338              		.loc 1 343 17 view .LVU85
 339 0048 FFF7FEFF 		bl	USBD_CtlSendData
 340              	.LVL22:
 344:Src/usbd_hid.c **** 
 341              		.loc 1 344 11 is_stmt 1 view .LVU86
 323:Src/usbd_hid.c ****   uint16_t len;
 342              		.loc 1 323 22 is_stmt 0 view .LVU87
 343 004c 0024     		movs	r4, #0
 344:Src/usbd_hid.c **** 
 344              		.loc 1 344 11 view .LVU88
 345 004e 63E0     		b	.L21
 346              	.LVL23:
 347              	.L27:
 347:Src/usbd_hid.c ****           break;
 348              		.loc 1 347 11 is_stmt 1 view .LVU89
 347:Src/usbd_hid.c ****           break;
 349              		.loc 1 347 42 is_stmt 0 view .LVU90
 350 0050 4A88     		ldrh	r2, [r1, #2]
 347:Src/usbd_hid.c ****           break;
 351              		.loc 1 347 29 view .LVU91
 352 0052 120A     		lsrs	r2, r2, #8
 347:Src/usbd_hid.c ****           break;
 353              		.loc 1 347 27 view .LVU92
 354 0054 5A60     		str	r2, [r3, #4]
 348:Src/usbd_hid.c **** 
 355              		.loc 1 348 11 is_stmt 1 view .LVU93
 323:Src/usbd_hid.c ****   uint16_t len;
 356              		.loc 1 323 22 is_stmt 0 view .LVU94
 357 0056 0024     		movs	r4, #0
 348:Src/usbd_hid.c **** 
 358              		.loc 1 348 11 view .LVU95
ARM GAS  /tmp/ccrUoaPi.s 			page 19


 359 0058 5EE0     		b	.L21
 360              	.L29:
 351:Src/usbd_hid.c ****           break;
 361              		.loc 1 351 11 is_stmt 1 view .LVU96
 351:Src/usbd_hid.c ****           break;
 362              		.loc 1 351 17 is_stmt 0 view .LVU97
 363 005a 0122     		movs	r2, #1
 364 005c 191D     		adds	r1, r3, #4
 365              	.LVL24:
 351:Src/usbd_hid.c ****           break;
 366              		.loc 1 351 17 view .LVU98
 367 005e FFF7FEFF 		bl	USBD_CtlSendData
 368              	.LVL25:
 352:Src/usbd_hid.c **** 
 369              		.loc 1 352 11 is_stmt 1 view .LVU99
 323:Src/usbd_hid.c ****   uint16_t len;
 370              		.loc 1 323 22 is_stmt 0 view .LVU100
 371 0062 0024     		movs	r4, #0
 352:Src/usbd_hid.c **** 
 372              		.loc 1 352 11 view .LVU101
 373 0064 58E0     		b	.L21
 374              	.LVL26:
 375              	.L24:
 355:Src/usbd_hid.c ****           ret = USBD_FAIL;
 376              		.loc 1 355 11 is_stmt 1 view .LVU102
 377 0066 FFF7FEFF 		bl	USBD_CtlError
 378              	.LVL27:
 356:Src/usbd_hid.c ****           break;
 379              		.loc 1 356 11 view .LVU103
 357:Src/usbd_hid.c ****       }
 380              		.loc 1 357 11 view .LVU104
 356:Src/usbd_hid.c ****           break;
 381              		.loc 1 356 15 is_stmt 0 view .LVU105
 382 006a 0324     		movs	r4, #3
 357:Src/usbd_hid.c ****       }
 383              		.loc 1 357 11 view .LVU106
 384 006c 54E0     		b	.L21
 385              	.LVL28:
 386              	.L22:
 361:Src/usbd_hid.c ****       {
 387              		.loc 1 361 7 is_stmt 1 view .LVU107
 361:Src/usbd_hid.c ****       {
 388              		.loc 1 361 18 is_stmt 0 view .LVU108
 389 006e 4D78     		ldrb	r5, [r1, #1]	@ zero_extendqisi2
 390 0070 0B2D     		cmp	r5, #11
 391 0072 4AD8     		bhi	.L30
 392 0074 DFE805F0 		tbb	[pc, r5]
 393              	.L32:
 394 0078 06       		.byte	(.L35-.L32)/2
 395 0079 50       		.byte	(.L21-.L32)/2
 396 007a 49       		.byte	(.L30-.L32)/2
 397 007b 49       		.byte	(.L30-.L32)/2
 398 007c 49       		.byte	(.L30-.L32)/2
 399 007d 49       		.byte	(.L30-.L32)/2
 400 007e 16       		.byte	(.L34-.L32)/2
 401 007f 49       		.byte	(.L30-.L32)/2
 402 0080 49       		.byte	(.L30-.L32)/2
ARM GAS  /tmp/ccrUoaPi.s 			page 20


 403 0081 49       		.byte	(.L30-.L32)/2
 404 0082 2E       		.byte	(.L33-.L32)/2
 405 0083 3D       		.byte	(.L31-.L32)/2
 406              		.p2align 1
 407              	.L35:
 364:Src/usbd_hid.c ****           {
 408              		.loc 1 364 11 is_stmt 1 view .LVU109
 364:Src/usbd_hid.c ****           {
 409              		.loc 1 364 19 is_stmt 0 view .LVU110
 410 0084 90F89C32 		ldrb	r3, [r0, #668]	@ zero_extendqisi2
 411              	.LVL29:
 364:Src/usbd_hid.c ****           {
 412              		.loc 1 364 19 view .LVU111
 413 0088 DBB2     		uxtb	r3, r3
 364:Src/usbd_hid.c ****           {
 414              		.loc 1 364 14 view .LVU112
 415 008a 032B     		cmp	r3, #3
 416 008c 03D0     		beq	.L44
 370:Src/usbd_hid.c ****             ret = USBD_FAIL;
 417              		.loc 1 370 13 is_stmt 1 view .LVU113
 418 008e FFF7FEFF 		bl	USBD_CtlError
 419              	.LVL30:
 371:Src/usbd_hid.c ****           }
 420              		.loc 1 371 13 view .LVU114
 371:Src/usbd_hid.c ****           }
 421              		.loc 1 371 17 is_stmt 0 view .LVU115
 422 0092 0324     		movs	r4, #3
 423 0094 40E0     		b	.L21
 424              	.LVL31:
 425              	.L44:
 366:Src/usbd_hid.c ****           }
 426              		.loc 1 366 13 is_stmt 1 view .LVU116
 366:Src/usbd_hid.c ****           }
 427              		.loc 1 366 19 is_stmt 0 view .LVU117
 428 0096 0222     		movs	r2, #2
 429 0098 0DF10601 		add	r1, sp, #6
 430              	.LVL32:
 366:Src/usbd_hid.c ****           }
 431              		.loc 1 366 19 view .LVU118
 432 009c FFF7FEFF 		bl	USBD_CtlSendData
 433              	.LVL33:
 323:Src/usbd_hid.c ****   uint16_t len;
 434              		.loc 1 323 22 view .LVU119
 435 00a0 2C46     		mov	r4, r5
 436 00a2 39E0     		b	.L21
 437              	.LVL34:
 438              	.L34:
 376:Src/usbd_hid.c ****           {
 439              		.loc 1 376 11 is_stmt 1 view .LVU120
 376:Src/usbd_hid.c ****           {
 440              		.loc 1 376 19 is_stmt 0 view .LVU121
 441 00a4 4B88     		ldrh	r3, [r1, #2]
 442              	.LVL35:
 376:Src/usbd_hid.c ****           {
 443              		.loc 1 376 34 view .LVU122
 444 00a6 1B0A     		lsrs	r3, r3, #8
 376:Src/usbd_hid.c ****           {
ARM GAS  /tmp/ccrUoaPi.s 			page 21


 445              		.loc 1 376 14 view .LVU123
 446 00a8 222B     		cmp	r3, #34
 447 00aa 09D0     		beq	.L45
 381:Src/usbd_hid.c ****           {
 448              		.loc 1 381 16 is_stmt 1 view .LVU124
 381:Src/usbd_hid.c ****           {
 449              		.loc 1 381 19 is_stmt 0 view .LVU125
 450 00ac 212B     		cmp	r3, #33
 451 00ae 0DD1     		bne	.L39
 383:Src/usbd_hid.c ****             len = MIN(USB_HID_DESC_SIZ, req->wLength);
 452              		.loc 1 383 13 is_stmt 1 view .LVU126
 453              	.LVL36:
 384:Src/usbd_hid.c ****           }
 454              		.loc 1 384 13 view .LVU127
 384:Src/usbd_hid.c ****           }
 455              		.loc 1 384 19 is_stmt 0 view .LVU128
 456 00b0 CA88     		ldrh	r2, [r1, #6]
 384:Src/usbd_hid.c ****           }
 457              		.loc 1 384 17 view .LVU129
 458 00b2 092A     		cmp	r2, #9
 459 00b4 28BF     		it	cs
 460 00b6 0922     		movcs	r2, #9
 461              	.LVL37:
 383:Src/usbd_hid.c ****             len = MIN(USB_HID_DESC_SIZ, req->wLength);
 462              		.loc 1 383 18 view .LVU130
 463 00b8 1A49     		ldr	r1, .L47
 464              	.LVL38:
 465              	.L38:
 392:Src/usbd_hid.c ****           break;
 466              		.loc 1 392 11 is_stmt 1 view .LVU131
 392:Src/usbd_hid.c ****           break;
 467              		.loc 1 392 17 is_stmt 0 view .LVU132
 468 00ba FFF7FEFF 		bl	USBD_CtlSendData
 469              	.LVL39:
 393:Src/usbd_hid.c **** 
 470              		.loc 1 393 11 is_stmt 1 view .LVU133
 471 00be 2BE0     		b	.L21
 472              	.LVL40:
 473              	.L45:
 378:Src/usbd_hid.c ****             pbuf = HID_MOUSE_ReportDesc;
 474              		.loc 1 378 13 view .LVU134
 378:Src/usbd_hid.c ****             pbuf = HID_MOUSE_ReportDesc;
 475              		.loc 1 378 19 is_stmt 0 view .LVU135
 476 00c0 CA88     		ldrh	r2, [r1, #6]
 378:Src/usbd_hid.c ****             pbuf = HID_MOUSE_ReportDesc;
 477              		.loc 1 378 17 view .LVU136
 478 00c2 B92A     		cmp	r2, #185
 479 00c4 28BF     		it	cs
 480 00c6 B922     		movcs	r2, #185
 481              	.LVL41:
 379:Src/usbd_hid.c ****           }
 482              		.loc 1 379 13 is_stmt 1 view .LVU137
 379:Src/usbd_hid.c ****           }
 483              		.loc 1 379 18 is_stmt 0 view .LVU138
 484 00c8 1749     		ldr	r1, .L47+4
 485              	.LVL42:
 379:Src/usbd_hid.c ****           }
ARM GAS  /tmp/ccrUoaPi.s 			page 22


 486              		.loc 1 379 18 view .LVU139
 487 00ca F6E7     		b	.L38
 488              	.LVL43:
 489              	.L39:
 388:Src/usbd_hid.c ****             ret = USBD_FAIL;
 490              		.loc 1 388 13 is_stmt 1 view .LVU140
 491 00cc FFF7FEFF 		bl	USBD_CtlError
 492              	.LVL44:
 389:Src/usbd_hid.c ****             break;
 493              		.loc 1 389 13 view .LVU141
 390:Src/usbd_hid.c ****           }
 494              		.loc 1 390 13 view .LVU142
 389:Src/usbd_hid.c ****             break;
 495              		.loc 1 389 17 is_stmt 0 view .LVU143
 496 00d0 0324     		movs	r4, #3
 390:Src/usbd_hid.c ****           }
 497              		.loc 1 390 13 view .LVU144
 498 00d2 21E0     		b	.L21
 499              	.LVL45:
 500              	.L33:
 396:Src/usbd_hid.c ****           {
 501              		.loc 1 396 11 is_stmt 1 view .LVU145
 396:Src/usbd_hid.c ****           {
 502              		.loc 1 396 19 is_stmt 0 view .LVU146
 503 00d4 90F89C22 		ldrb	r2, [r0, #668]	@ zero_extendqisi2
 504 00d8 D2B2     		uxtb	r2, r2
 396:Src/usbd_hid.c ****           {
 505              		.loc 1 396 14 view .LVU147
 506 00da 032A     		cmp	r2, #3
 507 00dc 03D0     		beq	.L46
 402:Src/usbd_hid.c ****             ret = USBD_FAIL;
 508              		.loc 1 402 13 is_stmt 1 view .LVU148
 509 00de FFF7FEFF 		bl	USBD_CtlError
 510              	.LVL46:
 403:Src/usbd_hid.c ****           }
 511              		.loc 1 403 13 view .LVU149
 403:Src/usbd_hid.c ****           }
 512              		.loc 1 403 17 is_stmt 0 view .LVU150
 513 00e2 0324     		movs	r4, #3
 514 00e4 18E0     		b	.L21
 515              	.LVL47:
 516              	.L46:
 398:Src/usbd_hid.c ****           }
 517              		.loc 1 398 13 is_stmt 1 view .LVU151
 398:Src/usbd_hid.c ****           }
 518              		.loc 1 398 19 is_stmt 0 view .LVU152
 519 00e6 0122     		movs	r2, #1
 520 00e8 03F10801 		add	r1, r3, #8
 521              	.LVL48:
 398:Src/usbd_hid.c ****           }
 522              		.loc 1 398 19 view .LVU153
 523 00ec FFF7FEFF 		bl	USBD_CtlSendData
 524              	.LVL49:
 398:Src/usbd_hid.c ****           }
 525              		.loc 1 398 19 view .LVU154
 526 00f0 12E0     		b	.L21
 527              	.LVL50:
ARM GAS  /tmp/ccrUoaPi.s 			page 23


 528              	.L31:
 408:Src/usbd_hid.c ****           {
 529              		.loc 1 408 11 is_stmt 1 view .LVU155
 408:Src/usbd_hid.c ****           {
 530              		.loc 1 408 19 is_stmt 0 view .LVU156
 531 00f2 90F89C22 		ldrb	r2, [r0, #668]	@ zero_extendqisi2
 532 00f6 D2B2     		uxtb	r2, r2
 408:Src/usbd_hid.c ****           {
 533              		.loc 1 408 14 view .LVU157
 534 00f8 032A     		cmp	r2, #3
 535 00fa 02D1     		bne	.L41
 410:Src/usbd_hid.c ****           }
 536              		.loc 1 410 13 is_stmt 1 view .LVU158
 410:Src/usbd_hid.c ****           }
 537              		.loc 1 410 32 is_stmt 0 view .LVU159
 538 00fc 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 410:Src/usbd_hid.c ****           }
 539              		.loc 1 410 30 view .LVU160
 540 00fe 9A60     		str	r2, [r3, #8]
 541 0100 0AE0     		b	.L21
 542              	.L41:
 414:Src/usbd_hid.c ****             ret = USBD_FAIL;
 543              		.loc 1 414 13 is_stmt 1 view .LVU161
 544 0102 FFF7FEFF 		bl	USBD_CtlError
 545              	.LVL51:
 415:Src/usbd_hid.c ****           }
 546              		.loc 1 415 13 view .LVU162
 415:Src/usbd_hid.c ****           }
 547              		.loc 1 415 17 is_stmt 0 view .LVU163
 548 0106 0324     		movs	r4, #3
 549 0108 06E0     		b	.L21
 550              	.LVL52:
 551              	.L30:
 423:Src/usbd_hid.c ****           ret = USBD_FAIL;
 552              		.loc 1 423 11 is_stmt 1 view .LVU164
 553 010a FFF7FEFF 		bl	USBD_CtlError
 554              	.LVL53:
 424:Src/usbd_hid.c ****           break;
 555              		.loc 1 424 11 view .LVU165
 425:Src/usbd_hid.c ****       }
 556              		.loc 1 425 11 view .LVU166
 424:Src/usbd_hid.c ****           break;
 557              		.loc 1 424 15 is_stmt 0 view .LVU167
 558 010e 0324     		movs	r4, #3
 425:Src/usbd_hid.c ****       }
 559              		.loc 1 425 11 view .LVU168
 560 0110 02E0     		b	.L21
 561              	.LVL54:
 562              	.L23:
 430:Src/usbd_hid.c ****       ret = USBD_FAIL;
 563              		.loc 1 430 7 is_stmt 1 view .LVU169
 564 0112 FFF7FEFF 		bl	USBD_CtlError
 565              	.LVL55:
 431:Src/usbd_hid.c ****       break;
 566              		.loc 1 431 7 view .LVU170
 432:Src/usbd_hid.c ****   }
 567              		.loc 1 432 7 view .LVU171
ARM GAS  /tmp/ccrUoaPi.s 			page 24


 431:Src/usbd_hid.c ****       break;
 568              		.loc 1 431 11 is_stmt 0 view .LVU172
 569 0116 0324     		movs	r4, #3
 570              	.LVL56:
 571              	.L21:
 436:Src/usbd_hid.c **** 
 572              		.loc 1 436 1 view .LVU173
 573 0118 2046     		mov	r0, r4
 574 011a 03B0     		add	sp, sp, #12
 575              	.LCFI5:
 576              		.cfi_remember_state
 577              		.cfi_def_cfa_offset 12
 578              		@ sp needed
 579 011c 30BD     		pop	{r4, r5, pc}
 580              	.LVL57:
 581              	.L42:
 582              	.LCFI6:
 583              		.cfi_restore_state
 330:Src/usbd_hid.c ****   }
 584              		.loc 1 330 12 view .LVU174
 585 011e 0324     		movs	r4, #3
 586 0120 FAE7     		b	.L21
 587              	.L48:
 588 0122 00BF     		.align	2
 589              	.L47:
 590 0124 00000000 		.word	.LANCHOR3
 591 0128 00000000 		.word	.LANCHOR2
 592              		.cfi_endproc
 593              	.LFE140:
 595              		.section	.text.USBD_HID_DeInit,"ax",%progbits
 596              		.align	1
 597              		.syntax unified
 598              		.thumb
 599              		.thumb_func
 600              		.fpu fpv4-sp-d16
 602              	USBD_HID_DeInit:
 603              	.LVL58:
 604              	.LFB139:
 290:Src/usbd_hid.c ****   UNUSED(cfgidx);
 605              		.loc 1 290 1 is_stmt 1 view -0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 290:Src/usbd_hid.c ****   UNUSED(cfgidx);
 609              		.loc 1 290 1 is_stmt 0 view .LVU176
 610 0000 10B5     		push	{r4, lr}
 611              	.LCFI7:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 4, -8
 614              		.cfi_offset 14, -4
 615 0002 0446     		mov	r4, r0
 291:Src/usbd_hid.c **** 
 616              		.loc 1 291 3 is_stmt 1 view .LVU177
 299:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 617              		.loc 1 299 3 view .LVU178
 299:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 618              		.loc 1 299 9 is_stmt 0 view .LVU179
ARM GAS  /tmp/ccrUoaPi.s 			page 25


 619 0004 8121     		movs	r1, #129
 620              	.LVL59:
 299:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 621              		.loc 1 299 9 view .LVU180
 622 0006 FFF7FEFF 		bl	USBD_LL_CloseEP
 623              	.LVL60:
 300:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 624              		.loc 1 300 3 is_stmt 1 view .LVU181
 300:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 625              		.loc 1 300 42 is_stmt 0 view .LVU182
 626 000a 0023     		movs	r3, #0
 627 000c 2387     		strh	r3, [r4, #56]	@ movhi
 301:Src/usbd_hid.c **** 
 628              		.loc 1 301 3 is_stmt 1 view .LVU183
 301:Src/usbd_hid.c **** 
 629              		.loc 1 301 44 is_stmt 0 view .LVU184
 630 000e 6387     		strh	r3, [r4, #58]	@ movhi
 304:Src/usbd_hid.c ****   {
 631              		.loc 1 304 3 is_stmt 1 view .LVU185
 304:Src/usbd_hid.c ****   {
 632              		.loc 1 304 33 is_stmt 0 view .LVU186
 633 0010 D4F8D432 		ldr	r3, [r4, #724]
 304:Src/usbd_hid.c ****   {
 634              		.loc 1 304 28 view .LVU187
 635 0014 B033     		adds	r3, r3, #176
 636 0016 54F82300 		ldr	r0, [r4, r3, lsl #2]
 304:Src/usbd_hid.c ****   {
 637              		.loc 1 304 6 view .LVU188
 638 001a 38B1     		cbz	r0, .L50
 306:Src/usbd_hid.c ****     pdev->pClassDataCmsit[pdev->classId] = NULL;
 639              		.loc 1 306 5 is_stmt 1 view .LVU189
 640 001c FFF7FEFF 		bl	USBD_static_free
 641              	.LVL61:
 307:Src/usbd_hid.c ****   }
 642              		.loc 1 307 5 view .LVU190
 307:Src/usbd_hid.c ****   }
 643              		.loc 1 307 31 is_stmt 0 view .LVU191
 644 0020 D4F8D432 		ldr	r3, [r4, #724]
 307:Src/usbd_hid.c ****   }
 645              		.loc 1 307 42 view .LVU192
 646 0024 B033     		adds	r3, r3, #176
 647 0026 0022     		movs	r2, #0
 648 0028 44F82320 		str	r2, [r4, r3, lsl #2]
 649              	.L50:
 310:Src/usbd_hid.c **** }
 650              		.loc 1 310 3 is_stmt 1 view .LVU193
 311:Src/usbd_hid.c **** 
 651              		.loc 1 311 1 is_stmt 0 view .LVU194
 652 002c 0020     		movs	r0, #0
 653 002e 10BD     		pop	{r4, pc}
 311:Src/usbd_hid.c **** 
 654              		.loc 1 311 1 view .LVU195
 655              		.cfi_endproc
 656              	.LFE139:
 658              		.section	.text.USBD_HID_Init,"ax",%progbits
 659              		.align	1
 660              		.syntax unified
ARM GAS  /tmp/ccrUoaPi.s 			page 26


 661              		.thumb
 662              		.thumb_func
 663              		.fpu fpv4-sp-d16
 665              	USBD_HID_Init:
 666              	.LVL62:
 667              	.LFB138:
 243:Src/usbd_hid.c ****   UNUSED(cfgidx);
 668              		.loc 1 243 1 is_stmt 1 view -0
 669              		.cfi_startproc
 670              		@ args = 0, pretend = 0, frame = 0
 671              		@ frame_needed = 0, uses_anonymous_args = 0
 243:Src/usbd_hid.c ****   UNUSED(cfgidx);
 672              		.loc 1 243 1 is_stmt 0 view .LVU197
 673 0000 38B5     		push	{r3, r4, r5, lr}
 674              	.LCFI8:
 675              		.cfi_def_cfa_offset 16
 676              		.cfi_offset 3, -16
 677              		.cfi_offset 4, -12
 678              		.cfi_offset 5, -8
 679              		.cfi_offset 14, -4
 680 0002 0446     		mov	r4, r0
 244:Src/usbd_hid.c **** 
 681              		.loc 1 244 3 is_stmt 1 view .LVU198
 246:Src/usbd_hid.c **** 
 682              		.loc 1 246 3 view .LVU199
 248:Src/usbd_hid.c **** 
 683              		.loc 1 248 3 view .LVU200
 248:Src/usbd_hid.c **** 
 684              		.loc 1 248 36 is_stmt 0 view .LVU201
 685 0004 1020     		movs	r0, #16
 686              	.LVL63:
 248:Src/usbd_hid.c **** 
 687              		.loc 1 248 36 view .LVU202
 688 0006 FFF7FEFF 		bl	USBD_static_malloc
 689              	.LVL64:
 250:Src/usbd_hid.c ****   {
 690              		.loc 1 250 3 is_stmt 1 view .LVU203
 250:Src/usbd_hid.c ****   {
 691              		.loc 1 250 6 is_stmt 0 view .LVU204
 692 000a B0B1     		cbz	r0, .L58
 693 000c 0546     		mov	r5, r0
 256:Src/usbd_hid.c ****   pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 694              		.loc 1 256 3 is_stmt 1 view .LVU205
 256:Src/usbd_hid.c ****   pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 695              		.loc 1 256 29 is_stmt 0 view .LVU206
 696 000e D4F8D432 		ldr	r3, [r4, #724]
 256:Src/usbd_hid.c ****   pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 697              		.loc 1 256 40 view .LVU207
 698 0012 B033     		adds	r3, r3, #176
 699 0014 44F82300 		str	r0, [r4, r3, lsl #2]
 257:Src/usbd_hid.c **** 
 700              		.loc 1 257 3 is_stmt 1 view .LVU208
 257:Src/usbd_hid.c **** 
 701              		.loc 1 257 20 is_stmt 0 view .LVU209
 702 0018 C4F8BC02 		str	r0, [r4, #700]
 264:Src/usbd_hid.c ****   {
 703              		.loc 1 264 3 is_stmt 1 view .LVU210
ARM GAS  /tmp/ccrUoaPi.s 			page 27


 264:Src/usbd_hid.c ****   {
 704              		.loc 1 264 11 is_stmt 0 view .LVU211
 705 001c 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 264:Src/usbd_hid.c ****   {
 706              		.loc 1 264 6 view .LVU212
 707 001e A3B9     		cbnz	r3, .L55
 266:Src/usbd_hid.c ****   }
 708              		.loc 1 266 5 is_stmt 1 view .LVU213
 266:Src/usbd_hid.c ****   }
 709              		.loc 1 266 46 is_stmt 0 view .LVU214
 710 0020 0723     		movs	r3, #7
 711 0022 6387     		strh	r3, [r4, #58]	@ movhi
 712              	.L56:
 274:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 713              		.loc 1 274 3 is_stmt 1 view .LVU215
 274:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 714              		.loc 1 274 9 is_stmt 0 view .LVU216
 715 0024 0423     		movs	r3, #4
 716 0026 0322     		movs	r2, #3
 717 0028 8121     		movs	r1, #129
 718 002a 2046     		mov	r0, r4
 719              	.LVL65:
 274:Src/usbd_hid.c ****   pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 720              		.loc 1 274 9 view .LVU217
 721 002c FFF7FEFF 		bl	USBD_LL_OpenEP
 722              	.LVL66:
 275:Src/usbd_hid.c **** 
 723              		.loc 1 275 3 is_stmt 1 view .LVU218
 275:Src/usbd_hid.c **** 
 724              		.loc 1 275 42 is_stmt 0 view .LVU219
 725 0030 0123     		movs	r3, #1
 726 0032 2387     		strh	r3, [r4, #56]	@ movhi
 277:Src/usbd_hid.c **** 
 727              		.loc 1 277 3 is_stmt 1 view .LVU220
 277:Src/usbd_hid.c **** 
 728              		.loc 1 277 15 is_stmt 0 view .LVU221
 729 0034 0020     		movs	r0, #0
 730 0036 2873     		strb	r0, [r5, #12]
 279:Src/usbd_hid.c **** }
 731              		.loc 1 279 3 is_stmt 1 view .LVU222
 732              	.LVL67:
 733              	.L54:
 280:Src/usbd_hid.c **** 
 734              		.loc 1 280 1 is_stmt 0 view .LVU223
 735 0038 38BD     		pop	{r3, r4, r5, pc}
 736              	.LVL68:
 737              	.L58:
 252:Src/usbd_hid.c ****     return (uint8_t)USBD_EMEM;
 738              		.loc 1 252 5 is_stmt 1 view .LVU224
 252:Src/usbd_hid.c ****     return (uint8_t)USBD_EMEM;
 739              		.loc 1 252 31 is_stmt 0 view .LVU225
 740 003a D4F8D432 		ldr	r3, [r4, #724]
 252:Src/usbd_hid.c ****     return (uint8_t)USBD_EMEM;
 741              		.loc 1 252 42 view .LVU226
 742 003e B033     		adds	r3, r3, #176
 743 0040 0022     		movs	r2, #0
 744 0042 44F82320 		str	r2, [r4, r3, lsl #2]
ARM GAS  /tmp/ccrUoaPi.s 			page 28


 253:Src/usbd_hid.c ****   }
 745              		.loc 1 253 5 is_stmt 1 view .LVU227
 253:Src/usbd_hid.c ****   }
 746              		.loc 1 253 12 is_stmt 0 view .LVU228
 747 0046 0220     		movs	r0, #2
 748              	.LVL69:
 253:Src/usbd_hid.c ****   }
 749              		.loc 1 253 12 view .LVU229
 750 0048 F6E7     		b	.L54
 751              	.LVL70:
 752              	.L55:
 270:Src/usbd_hid.c ****   }
 753              		.loc 1 270 5 is_stmt 1 view .LVU230
 270:Src/usbd_hid.c ****   }
 754              		.loc 1 270 46 is_stmt 0 view .LVU231
 755 004a 0123     		movs	r3, #1
 756 004c 6387     		strh	r3, [r4, #58]	@ movhi
 757 004e E9E7     		b	.L56
 758              		.cfi_endproc
 759              	.LFE138:
 761              		.section	.text.USBD_HID_SendReport,"ax",%progbits
 762              		.align	1
 763              		.global	USBD_HID_SendReport
 764              		.syntax unified
 765              		.thumb
 766              		.thumb_func
 767              		.fpu fpv4-sp-d16
 769              	USBD_HID_SendReport:
 770              	.LVL71:
 771              	.LFB141:
 453:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 772              		.loc 1 453 1 is_stmt 1 view -0
 773              		.cfi_startproc
 774              		@ args = 0, pretend = 0, frame = 0
 775              		@ frame_needed = 0, uses_anonymous_args = 0
 453:Src/usbd_hid.c ****   USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 776              		.loc 1 453 1 is_stmt 0 view .LVU233
 777 0000 10B5     		push	{r4, lr}
 778              	.LCFI9:
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 4, -8
 781              		.cfi_offset 14, -4
 454:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE */
 782              		.loc 1 454 3 is_stmt 1 view .LVU234
 454:Src/usbd_hid.c **** #endif /* USE_USBD_COMPOSITE */
 783              		.loc 1 454 27 is_stmt 0 view .LVU235
 784 0002 D0F8D432 		ldr	r3, [r0, #724]
 785 0006 03F1B00C 		add	ip, r3, #176
 786 000a 50F82C30 		ldr	r3, [r0, ip, lsl #2]
 787              	.LVL72:
 457:Src/usbd_hid.c ****   {
 788              		.loc 1 457 3 is_stmt 1 view .LVU236
 457:Src/usbd_hid.c ****   {
 789              		.loc 1 457 6 is_stmt 0 view .LVU237
 790 000e BBB1     		cbz	r3, .L61
 467:Src/usbd_hid.c ****   {
 791              		.loc 1 467 3 is_stmt 1 view .LVU238
ARM GAS  /tmp/ccrUoaPi.s 			page 29


 467:Src/usbd_hid.c ****   {
 792              		.loc 1 467 11 is_stmt 0 view .LVU239
 793 0010 90F89CC2 		ldrb	ip, [r0, #668]	@ zero_extendqisi2
 794 0014 5FFA8CFC 		uxtb	ip, ip
 467:Src/usbd_hid.c ****   {
 795              		.loc 1 467 6 view .LVU240
 796 0018 BCF1030F 		cmp	ip, #3
 797 001c 02D0     		beq	.L65
 476:Src/usbd_hid.c **** }
 798              		.loc 1 476 10 view .LVU241
 799 001e 0024     		movs	r4, #0
 800              	.LVL73:
 801              	.L60:
 477:Src/usbd_hid.c **** 
 802              		.loc 1 477 1 view .LVU242
 803 0020 2046     		mov	r0, r4
 804 0022 10BD     		pop	{r4, pc}
 805              	.LVL74:
 806              	.L65:
 469:Src/usbd_hid.c ****     {
 807              		.loc 1 469 5 is_stmt 1 view .LVU243
 469:Src/usbd_hid.c ****     {
 808              		.loc 1 469 13 is_stmt 0 view .LVU244
 809 0024 1C7B     		ldrb	r4, [r3, #12]	@ zero_extendqisi2
 469:Src/usbd_hid.c ****     {
 810              		.loc 1 469 8 view .LVU245
 811 0026 0CB1     		cbz	r4, .L66
 476:Src/usbd_hid.c **** }
 812              		.loc 1 476 10 view .LVU246
 813 0028 0024     		movs	r4, #0
 814 002a F9E7     		b	.L60
 815              	.L66:
 471:Src/usbd_hid.c ****       (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 816              		.loc 1 471 7 is_stmt 1 view .LVU247
 471:Src/usbd_hid.c ****       (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 817              		.loc 1 471 19 is_stmt 0 view .LVU248
 818 002c 4FF0010C 		mov	ip, #1
 819 0030 83F80CC0 		strb	ip, [r3, #12]
 472:Src/usbd_hid.c ****     }
 820              		.loc 1 472 7 is_stmt 1 view .LVU249
 472:Src/usbd_hid.c ****     }
 821              		.loc 1 472 13 is_stmt 0 view .LVU250
 822 0034 1346     		mov	r3, r2
 823              	.LVL75:
 472:Src/usbd_hid.c ****     }
 824              		.loc 1 472 13 view .LVU251
 825 0036 0A46     		mov	r2, r1
 826              	.LVL76:
 472:Src/usbd_hid.c ****     }
 827              		.loc 1 472 13 view .LVU252
 828 0038 8121     		movs	r1, #129
 829              	.LVL77:
 472:Src/usbd_hid.c ****     }
 830              		.loc 1 472 13 view .LVU253
 831 003a FFF7FEFF 		bl	USBD_LL_Transmit
 832              	.LVL78:
 472:Src/usbd_hid.c ****     }
ARM GAS  /tmp/ccrUoaPi.s 			page 30


 833              		.loc 1 472 13 view .LVU254
 834 003e EFE7     		b	.L60
 835              	.LVL79:
 836              	.L61:
 459:Src/usbd_hid.c ****   }
 837              		.loc 1 459 12 view .LVU255
 838 0040 0324     		movs	r4, #3
 839 0042 EDE7     		b	.L60
 840              		.cfi_endproc
 841              	.LFE141:
 843              		.section	.text.USBD_HID_GetPollingInterval,"ax",%progbits
 844              		.align	1
 845              		.global	USBD_HID_GetPollingInterval
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu fpv4-sp-d16
 851              	USBD_HID_GetPollingInterval:
 852              	.LVL80:
 853              	.LFB142:
 486:Src/usbd_hid.c ****   uint32_t polling_interval;
 854              		.loc 1 486 1 is_stmt 1 view -0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 487:Src/usbd_hid.c **** 
 859              		.loc 1 487 3 view .LVU257
 490:Src/usbd_hid.c ****   {
 860              		.loc 1 490 3 view .LVU258
 490:Src/usbd_hid.c ****   {
 861              		.loc 1 490 11 is_stmt 0 view .LVU259
 862 0000 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 490:Src/usbd_hid.c ****   {
 863              		.loc 1 490 6 view .LVU260
 864 0002 0BB1     		cbz	r3, .L70
 501:Src/usbd_hid.c ****   }
 865              		.loc 1 501 22 view .LVU261
 866 0004 0120     		movs	r0, #1
 867              	.LVL81:
 504:Src/usbd_hid.c **** }
 868              		.loc 1 504 3 is_stmt 1 view .LVU262
 505:Src/usbd_hid.c **** 
 869              		.loc 1 505 1 is_stmt 0 view .LVU263
 870 0006 7047     		bx	lr
 871              	.LVL82:
 872              	.L70:
 495:Src/usbd_hid.c ****   }
 873              		.loc 1 495 22 view .LVU264
 874 0008 0820     		movs	r0, #8
 875              	.LVL83:
 495:Src/usbd_hid.c ****   }
 876              		.loc 1 495 22 view .LVU265
 877 000a 7047     		bx	lr
 878              		.cfi_endproc
 879              	.LFE142:
 881              		.global	USBD_HID
ARM GAS  /tmp/ccrUoaPi.s 			page 31


 882              		.section	.data.HID_MOUSE_ReportDesc,"aw"
 883              		.align	2
 884              		.set	.LANCHOR2,. + 0
 887              	HID_MOUSE_ReportDesc:
 888 0000 05010904 		.ascii	"\005\001\011\004\241\001\205\001\011\001\241\000\011"
 888      A1018501 
 888      0901A100 
 888      09
 889 000d 30093116 		.ascii	"0\0111\026\000\200&\377\177u\020\225\002\201\002\005"
 889      008026FF 
 889      7F751095 
 889      02810205 
 890 001d 09190129 		.ascii	"\011\031\001)\010\025\000%\001u\001\225\010\201\002"
 890      08150025 
 890      01750195 
 890      088102
 891 002c C0050F09 		.ascii	"\300\005\017\011\222\241\002\205\002\011\237\011\240"
 891      92A10285 
 891      02099F09 
 891      A0
 892 0039 09A409A5 		.ascii	"\011\244\011\245\011\246\025\000%\001u\001\225\005\201"
 892      09A61500 
 892      25017501 
 892      950581
 893 0048 02750395 		.ascii	"\002u\003\225\001\201\003\011\224\025\000%(u\010\225"
 893      01810309 
 893      94150025 
 893      28750895 
 894 0058 018102C0 		.ascii	"\001\201\002\300\005\017\011!\241\002\205\001\011\""
 894      050F0921 
 894      A1028501 
 894      0922
 895 0066 15012528 		.ascii	"\025\001%(u\010\225\001\221\002\011%\241\002\011&\011"
 895      75089501 
 895      91020925 
 895      A1020926 
 895      09
 896 0077 27093009 		.ascii	"'\0110\0111\0112\0113\0114\011@\011A\011B\011C%\013"
 896      31093209 
 896      33093409 
 896      40094109 
 896      42094325 
 897 008c 75089501 		.ascii	"u\010\225\001\221\000\300\011P\011T\011Q\025\000&\377"
 897      9100C009 
 897      50095409 
 897      51150026 
 897      FF
 898 009d 7F751095 		.ascii	"\177u\020\225\003\221\002\011\247\025\000&\377\177u"
 898      03910209 
 898      A7150026 
 898      FF7F75
 899 00ac 10950191 		.ascii	"\020\225\001\221\002\300\300\000"
 899      02C0C000 
 900 00b4 00000000 		.space	5
 900      00
 901              		.section	.data.USBD_HID,"aw"
 902              		.align	2
ARM GAS  /tmp/ccrUoaPi.s 			page 32


 905              	USBD_HID:
 906 0000 00000000 		.word	USBD_HID_Init
 907 0004 00000000 		.word	USBD_HID_DeInit
 908 0008 00000000 		.word	USBD_HID_Setup
 909 000c 00000000 		.word	0
 910 0010 00000000 		.word	0
 911 0014 00000000 		.word	USBD_HID_DataIn
 912 0018 00000000 		.word	0
 913 001c 00000000 		.word	0
 914 0020 00000000 		.word	0
 915 0024 00000000 		.word	0
 916 0028 00000000 		.word	USBD_HID_GetHSCfgDesc
 917 002c 00000000 		.word	USBD_HID_GetFSCfgDesc
 918 0030 00000000 		.word	USBD_HID_GetOtherSpeedCfgDesc
 919 0034 00000000 		.word	USBD_HID_GetDeviceQualifierDesc
 920              		.section	.data.USBD_HID_CfgDesc,"aw"
 921              		.align	2
 922              		.set	.LANCHOR1,. + 0
 925              	USBD_HID_CfgDesc:
 926 0000 09022200 		.ascii	"\011\002\"\000\001\001\000\2402\011\004\000\000\001"
 926      010100A0 
 926      32090400 
 926      0001
 927 000e 03000000 		.ascii	"\003\000\000\000\011!\021\001\000\001\"\271\000\007"
 927      09211101 
 927      000122B9 
 927      0007
 928 001c 05810304 		.ascii	"\005\201\003\004\000\001"
 928      0001
 929              		.section	.data.USBD_HID_Desc,"aw"
 930              		.align	2
 931              		.set	.LANCHOR3,. + 0
 934              	USBD_HID_Desc:
 935 0000 09211101 		.ascii	"\011!\021\001\000\001\"\271\000"
 935      000122B9 
 935      00
 936              		.section	.data.USBD_HID_DeviceQualifierDesc,"aw"
 937              		.align	2
 938              		.set	.LANCHOR0,. + 0
 941              	USBD_HID_DeviceQualifierDesc:
 942 0000 0A060002 		.ascii	"\012\006\000\002\000\000\000@\001\000"
 942      00000040 
 942      0100
 943              		.text
 944              	.Letext0:
 945              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 946              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 947              		.file 4 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 948              		.file 5 "Middlewares/ST/STM32_USB_Device_Library/Class/HID/Inc/usbd_hid.h"
 949              		.file 6 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_core.h"
 950              		.file 7 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ioreq.h"
 951              		.file 8 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h"
 952              		.file 9 "Inc/usbd_conf.h"
ARM GAS  /tmp/ccrUoaPi.s 			page 33


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_hid.c
     /tmp/ccrUoaPi.s:18     .text.USBD_HID_DataIn:0000000000000000 $t
     /tmp/ccrUoaPi.s:25     .text.USBD_HID_DataIn:0000000000000000 USBD_HID_DataIn
     /tmp/ccrUoaPi.s:53     .text.USBD_HID_GetDeviceQualifierDesc:0000000000000000 $t
     /tmp/ccrUoaPi.s:59     .text.USBD_HID_GetDeviceQualifierDesc:0000000000000000 USBD_HID_GetDeviceQualifierDesc
     /tmp/ccrUoaPi.s:80     .text.USBD_HID_GetDeviceQualifierDesc:0000000000000008 $d
     /tmp/ccrUoaPi.s:85     .text.USBD_HID_GetOtherSpeedCfgDesc:0000000000000000 $t
     /tmp/ccrUoaPi.s:91     .text.USBD_HID_GetOtherSpeedCfgDesc:0000000000000000 USBD_HID_GetOtherSpeedCfgDesc
     /tmp/ccrUoaPi.s:136    .text.USBD_HID_GetOtherSpeedCfgDesc:000000000000001c $d
     /tmp/ccrUoaPi.s:141    .text.USBD_HID_GetFSCfgDesc:0000000000000000 $t
     /tmp/ccrUoaPi.s:147    .text.USBD_HID_GetFSCfgDesc:0000000000000000 USBD_HID_GetFSCfgDesc
     /tmp/ccrUoaPi.s:192    .text.USBD_HID_GetFSCfgDesc:000000000000001c $d
     /tmp/ccrUoaPi.s:197    .text.USBD_HID_GetHSCfgDesc:0000000000000000 $t
     /tmp/ccrUoaPi.s:203    .text.USBD_HID_GetHSCfgDesc:0000000000000000 USBD_HID_GetHSCfgDesc
     /tmp/ccrUoaPi.s:248    .text.USBD_HID_GetHSCfgDesc:000000000000001c $d
     /tmp/ccrUoaPi.s:253    .text.USBD_HID_Setup:0000000000000000 $t
     /tmp/ccrUoaPi.s:259    .text.USBD_HID_Setup:0000000000000000 USBD_HID_Setup
     /tmp/ccrUoaPi.s:310    .text.USBD_HID_Setup:0000000000000032 $d
     /tmp/ccrUoaPi.s:320    .text.USBD_HID_Setup:000000000000003c $t
     /tmp/ccrUoaPi.s:394    .text.USBD_HID_Setup:0000000000000078 $d
     /tmp/ccrUoaPi.s:406    .text.USBD_HID_Setup:0000000000000084 $t
     /tmp/ccrUoaPi.s:590    .text.USBD_HID_Setup:0000000000000124 $d
     /tmp/ccrUoaPi.s:596    .text.USBD_HID_DeInit:0000000000000000 $t
     /tmp/ccrUoaPi.s:602    .text.USBD_HID_DeInit:0000000000000000 USBD_HID_DeInit
     /tmp/ccrUoaPi.s:659    .text.USBD_HID_Init:0000000000000000 $t
     /tmp/ccrUoaPi.s:665    .text.USBD_HID_Init:0000000000000000 USBD_HID_Init
     /tmp/ccrUoaPi.s:762    .text.USBD_HID_SendReport:0000000000000000 $t
     /tmp/ccrUoaPi.s:769    .text.USBD_HID_SendReport:0000000000000000 USBD_HID_SendReport
     /tmp/ccrUoaPi.s:844    .text.USBD_HID_GetPollingInterval:0000000000000000 $t
     /tmp/ccrUoaPi.s:851    .text.USBD_HID_GetPollingInterval:0000000000000000 USBD_HID_GetPollingInterval
     /tmp/ccrUoaPi.s:905    .data.USBD_HID:0000000000000000 USBD_HID
     /tmp/ccrUoaPi.s:883    .data.HID_MOUSE_ReportDesc:0000000000000000 $d
     /tmp/ccrUoaPi.s:887    .data.HID_MOUSE_ReportDesc:0000000000000000 HID_MOUSE_ReportDesc
     /tmp/ccrUoaPi.s:902    .data.USBD_HID:0000000000000000 $d
     /tmp/ccrUoaPi.s:921    .data.USBD_HID_CfgDesc:0000000000000000 $d
     /tmp/ccrUoaPi.s:925    .data.USBD_HID_CfgDesc:0000000000000000 USBD_HID_CfgDesc
     /tmp/ccrUoaPi.s:930    .data.USBD_HID_Desc:0000000000000000 $d
     /tmp/ccrUoaPi.s:934    .data.USBD_HID_Desc:0000000000000000 USBD_HID_Desc
     /tmp/ccrUoaPi.s:937    .data.USBD_HID_DeviceQualifierDesc:0000000000000000 $d
     /tmp/ccrUoaPi.s:941    .data.USBD_HID_DeviceQualifierDesc:0000000000000000 USBD_HID_DeviceQualifierDesc

UNDEFINED SYMBOLS
USBD_GetEpDesc
USBD_CtlSendData
USBD_CtlError
USBD_LL_CloseEP
USBD_static_free
USBD_static_malloc
USBD_LL_OpenEP
USBD_LL_Transmit
